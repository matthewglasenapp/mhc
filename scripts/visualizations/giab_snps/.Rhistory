axis.text.x = element_text(angle = 45, hjust = 1, size = 6, margin = margin(t = -5)), # Angle labels and reduce gap
axis.title = element_text(size = 12),
panel.grid.major.x = element_line(color = "grey80", size = 0.5), # Restore vertical grid lines
panel.grid.major.y = element_line(color = "grey80", size = 0.5)  # Ensure horizontal grid lines are present
)
# Save the plot
ggsave(filename = "giab_snps_with_lines.pdf", plot = figure, width = 169, units = "mm")
ggsave(filename = "giab_snps_with_lines.png", plot = figure, width = 169, units = "mm")
figure
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Maintain the order of genes as in the CSV
data$gene <- factor(data$gene, levels = data$gene)
# Create the bar chart with connecting lines
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_segment(aes(x = 0, xend = snps, y = gene, yend = gene), color = "grey60", size = 0.4) +
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 6.5, margin = margin(r = -5)), # Adjust proximity of Y-axis labels
axis.text.x = element_text(size = 8),
axis.title = element_text(size = 12),
panel.grid.major.y = element_blank(), # Remove grid lines along the Y-axis
panel.grid.major.x = element_blank()  # Remove grid lines along the X-axis
)
figure
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Maintain the order of genes as in the CSV
data$gene <- factor(data$gene, levels = data$gene)
# Create the bar chart with connecting lines
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_segment(aes(x = snps, xend = snps, y = as.numeric(gene) - 0.4, yend = as.numeric(gene) + 0.4),
color = "grey60", size = 0.4) +
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 7, margin = margin(r = -5)), # Adjust proximity of Y-axis labels
axis.text.x = element_text(size = 8),
axis.title = element_text(size = 12),
panel.grid.major.y = element_blank(), # Remove grid lines along the Y-axis
panel.grid.major.x = element_blank()  # Remove grid lines along the X-axis
)
figure
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Maintain the order of genes as in the CSV
data$gene <- factor(data$gene, levels = data$gene)
# Create the vertical bar chart
figure <- ggplot(data, aes(x = gene, y = snps)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
x = "Gene",
y = "# SNPs (GIAB)"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 7), # Angled labels for readability
axis.title = element_text(size = 12),
panel.grid.major.x = element_blank()  # Remove unnecessary grid lines
)
figure
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Maintain the order of genes as in the CSV
data$gene <- factor(data$gene, levels = data$gene)
# Create the vertical bar chart
figure <- ggplot(data, aes(x = gene, y = snps)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
x = "Gene",
y = "# SNPs (GIAB)"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 6.5), # Angled labels for readability
axis.title = element_text(size = 12),
panel.grid.major.x = element_blank()  # Remove unnecessary grid lines
)
figure
# Save the plot
ggsave(filename = "giab_snps.pdf", plot = figure, width = 169, units = "mm")
ggsave(filename = "giab_snps.png", plot = figure, width = 169, units = "mm")
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Maintain the order of genes as in the CSV
data$gene <- factor(data$gene, levels = data$gene)
# Create the horizontal bar chart with Y-axis ticks and adjusted label margins
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 8, margin = margin(r = -5)), # Adjust proximity of Y-axis labels to bars
axis.text.x = element_text(size = 10), # Standardize X-axis text
axis.title = element_text(size = 12),
panel.grid.major.y = element_blank(), # Remove grid lines along the Y-axis
panel.grid.major.x = element_line(color = "grey80", size = 0.5) # Keep grid lines for the X-axis
) +
scale_y_discrete(labels = function(labels) labels) # Ensure ticks align with the bars
figure
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Ensure the gene column maintains the CSV order
data$gene <- factor(data$gene, levels = data$gene)
# Create the horizontal bar chart with Y-axis ticks
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
scale_y_discrete(expand = expansion(mult = c(0, 0))) +  # Ensure bars align with ticks
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 7, margin = margin(r = -10)),  # Bring labels closer to bars
axis.ticks.y = element_line(color = "black", size = 0.5),  # Add ticks to the Y-axis
axis.ticks.length.y = unit(2, "mm"),  # Set tick length on the Y-axis
axis.title = element_text(size = 12),
panel.grid.major.y = element_blank(),  # Remove horizontal grid lines
panel.grid.major.x = element_line(color = "grey80", size = 0.5)  # Retain vertical grid lines for X-axis
)
figure
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Ensure the gene column maintains the CSV order
data$gene <- factor(data$gene, levels = data$gene)
# Create the horizontal bar chart with properly aligned ticks
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
scale_y_discrete(expand = expansion(mult = c(0, 0))) +  # Align bars with Y-axis ticks
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 7, margin = margin(r = -10)),  # Adjust label position
axis.ticks.y = element_blank(),  # Remove the default Y-axis ticks
panel.grid.major.y = element_line(color = "grey80", size = 0.5)  # Use grid lines as visual ticks
)
figure
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Ensure the gene column maintains the CSV order
data$gene <- factor(data$gene, levels = data$gene)
# Create the horizontal bar chart with proper Y-axis ticks
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
scale_y_discrete(expand = expansion(add = c(0.5, 0.5))) +  # Add spacing for alignment
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 7, margin = margin(r = -10)),  # Bring labels closer to bars
axis.ticks.y = element_line(color = "black", size = 0.5),       # Add proper Y-axis ticks
axis.ticks.length.y = unit(2, "mm"),                           # Adjust tick length
axis.title = element_text(size = 12),
panel.grid.major.y = element_blank()                           # Remove horizontal grid lines
)
figure
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Ensure the gene column maintains the CSV order
data$gene <- factor(data$gene, levels = data$gene)
# Create the horizontal bar chart with ticks at x = 0
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
# Add ticks at x = 0
geom_segment(aes(x = 0, xend = 0, y = as.numeric(gene) - 0.4, yend = as.numeric(gene) + 0.4),
color = "black", size = 0.5) +
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 7, margin = margin(r = -10)), # Adjust label proximity
axis.title = element_text(size = 12),
panel.grid.major.y = element_blank(), # Remove default gridlines
panel.grid.minor.y = element_blank()
)
figure
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Ensure the gene column maintains the CSV order
data$gene <- factor(data$gene, levels = data$gene)
# Create the horizontal bar chart with ticks at x = 0
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 7, margin = margin(r = -10)), # Adjust label proximity
axis.title = element_text(size = 12),
panel.grid.major.y = element_blank(), # Remove default gridlines
panel.grid.minor.y = element_blank()
)
figure
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Ensure the gene column maintains the CSV order
data$gene <- factor(data$gene, levels = data$gene)
# Create the horizontal bar chart with ticks at x = 0
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 6, margin = margin(r = -25)), # Adjust label proximity
axis.title = element_text(size = 12),
panel.grid.major.y = element_blank(), # Remove default gridlines
panel.grid.minor.y = element_blank()
)
figure
source("~/Documents/GitHub/mhc/scripts/visualizations/giab_snps/giab_snps.R", echo=TRUE)
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Ensure the gene column maintains the CSV order
data$gene <- factor(data$gene, levels = data$gene)
# Create the horizontal bar chart with ticks at x = 0
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 6, margin = margin(r = -25)), # Adjust label proximity
axis.title = element_text(size = 12),
panel.grid.major.y = element_blank(), # Remove default gridlines
panel.grid.minor.y = element_blank()
)
figure
# Save the plot
ggsave(filename = "giab_snps.pdf", plot = figure, width = 169, height = 119, units = "mm")
ggsave(filename = "giab_snps.png", plot = figure, width = 169, height = 119, units = "mm")
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Ensure the gene column maintains the CSV order
data$gene <- factor(data$gene, levels = data$gene)
# Create the horizontal bar chart with ticks at x = 0
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 6, margin = margin(r = -20)), # Adjust label proximity
axis.title = element_text(size = 12),
panel.grid.major.y = element_blank(), # Remove default gridlines
panel.grid.minor.y = element_blank()
)
figure
# Save the plot
ggsave(filename = "giab_snps.pdf", plot = figure, width = 169, height = 119, units = "mm")
ggsave(filename = "giab_snps.png", plot = figure, width = 169, height = 119, units = "mm")
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Ensure the gene column maintains the CSV order
data$gene <- factor(data$gene, levels = data$gene)
# Create the horizontal bar chart with ticks at x = 0
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 6, margin = margin(r = -20)), # Adjust label proximity
axis.title = element_text(size = 12),
panel.grid.major.y = element_blank(), # Remove default gridlines
panel.grid.minor.y = element_blank()
)
figure
# Save the plot
ggsave(filename = "giab_snps.pdf", plot = figure, height = 234, units = "mm")
ggsave(filename = "giab_snps.png", plot = figure, height = 234, units = "mm")
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Ensure the gene column maintains the CSV order
data$gene <- factor(data$gene, levels = data$gene)
# Create the horizontal bar chart with ticks at x = 0
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 5, margin = margin(r = -20)), # Adjust label proximity
axis.title = element_text(size = 12),
panel.grid.major.y = element_blank(), # Remove default gridlines
panel.grid.minor.y = element_blank()
)
figure
# Save the plot
ggsave(filename = "giab_snps.pdf", plot = figure, height = 234, units = "mm")
ggsave(filename = "giab_snps.png", plot = figure, height = 234, units = "mm")
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Ensure the gene column maintains the CSV order
data$gene <- factor(data$gene, levels = data$gene)
# Create the horizontal bar chart with ticks at x = 0
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 5, margin = margin(r = -20)), # Adjust label proximity
axis.title = element_text(size = 12),
panel.grid.major.y = element_blank(), # Remove default gridlines
panel.grid.minor.y = element_blank()
)
figure
# Save the plot
ggsave(filename = "giab_snps.pdf", plot = figure)
ggsave(filename = "giab_snps.png", plot = figure)
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Reverse the order of the genes for the Y-axis
data$gene <- factor(data$gene, levels = rev(data$gene))
# Create the horizontal bar chart with reversed Y-axis order
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 5, margin = margin(r = -25)), # Adjust label proximity
axis.title = element_text(size = 10, face = "bold"),
panel.grid.major.y = element_blank(), # Remove default gridlines
panel.grid.minor.y = element_blank()
)
figure
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Reverse the order of the genes for the Y-axis
data$gene <- factor(data$gene, levels = rev(data$gene))
# Create the horizontal bar chart with reversed Y-axis order
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 5, margin = margin(r = -25)), # Adjust label proximity
axis.title = element_text(size = 9, face = "bold"),
panel.grid.major.y = element_blank(), # Remove default gridlines
panel.grid.minor.y = element_blank()
)
figure
# Save the plot
ggsave(filename = "giab_snps.pdf", plot = figure)
ggsave(filename = "giab_snps.png", plot = figure)
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps_all.csv")
# Reverse the order of the genes for the Y-axis
data$gene <- factor(data$gene, levels = rev(data$gene))
# Create the horizontal bar chart with reversed Y-axis order
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 5, margin = margin(r = -25)), # Adjust label proximity
axis.title = element_text(size = 9, face = "bold"),
panel.grid.major.y = element_blank(), # Remove default gridlines
panel.grid.minor.y = element_blank()
)
figure
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps_all.csv")
# Reverse the order of the genes for the Y-axis
data$gene <- factor(data$gene, levels = rev(data$gene))
# Create the horizontal bar chart with reversed Y-axis order
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 5, margin = margin(r = -25)), # Adjust label proximity
axis.title = element_text(size = 9, face = "bold"),
panel.grid.major.y = element_blank(), # Remove default gridlines
panel.grid.minor.y = element_blank()
)
figure
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps_all.csv")
# Reverse the order of the genes for the Y-axis
data$gene <- factor(data$gene, levels = rev(data$gene))
# Create the horizontal bar chart with reversed Y-axis order
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 5, margin = margin(r = -25)), # Adjust label proximity
axis.title = element_text(size = 9, face = "bold"),
panel.grid.major.y = element_blank(), # Remove default gridlines
panel.grid.minor.y = element_blank()
)
figure
# Save the plot
ggsave(filename = "giab_snps_all.pdf", plot = figure)
ggsave(filename = "giab_snps_all.png", plot = figure)
# Load necessary library
library(ggplot2)
# Read the data
data <- read.csv("HG002_gene_snps.csv")
# Reverse the order of the genes for the Y-axis
data$gene <- factor(data$gene, levels = rev(data$gene))
# Create the horizontal bar chart with reversed Y-axis order
figure <- ggplot(data, aes(x = snps, y = gene)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
x = "# SNPs (GIAB)",
y = "Gene"
) +
theme(
axis.text.y = element_text(size = 5, margin = margin(r = -25)), # Adjust label proximity
axis.title = element_text(size = 9, face = "bold"),
panel.grid.major.y = element_blank(), # Remove default gridlines
panel.grid.minor.y = element_blank()
)
figure
# Save the plot
ggsave(filename = "giab_snps.pdf", plot = figure)
ggsave(filename = "giab_snps.png", plot = figure)
