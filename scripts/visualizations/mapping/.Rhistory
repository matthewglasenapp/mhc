)
print(test2)
# Define HPRC samples and class I genes
hprc_samples <- c("HG002", "HG01106", "HG01258", "HG01928", "HG02055", "HG02630", "HG03492", "HG03579", "NA19240", "NA20129", "NA21309")
class_I <- c("HLA-A", "HLA-B", "HLA-C")
# Make long format from df_long with edit distances and alignment lengths
df_classI_long <- df_long %>%
filter(sample %in% hprc_samples, Gene %in% class_I) %>%
select(sample, Gene, hap1, hap2, alignment_length_1, alignment_length_2) %>%
mutate(
hap1 = ifelse(hap1 == "NA", NA, hap1),
hap2 = ifelse(hap2 == "NA", NA, hap2),
alignment_length_1 = as.numeric(alignment_length_1),
alignment_length_2 = as.numeric(alignment_length_2)
) %>%
pivot_longer(
cols = c(hap1, hap2),
names_to = "hap",
values_to = "edit_distance"
) %>%
mutate(
alignment_length = ifelse(hap == "hap1", alignment_length_1, alignment_length_2),
edit_distance = as.numeric(edit_distance),
similarity_score = ifelse(!is.na(edit_distance) & !is.na(alignment_length),
1 - (edit_distance / alignment_length), NA),
Gene_hap = paste0(Gene, "_", ifelse(hap == "hap1", "1", "2")),
label = case_when(
is.na(similarity_score) ~ NA_character_,
similarity_score == 1 ~ "1",
TRUE ~ sprintf("%.3f", similarity_score)
),
text_color = ifelse(is.na(similarity_score) | similarity_score < 0.9, "black", "white")
)
# Plot
similarity_plot <- ggplot(df_classI_long, aes(x = Gene_hap, y = sample, fill = similarity_score)) +
geom_tile(color = "white") +
geom_text(aes(label = label, color = text_color), size = 4, fontface = "bold", na.rm = TRUE) +
#scale_fill_gradient(high = "red", low = "white", na.value = "grey", name = #"Percent\nSequence\nIdentity") +
scale_fill_viridis_c(option = "D", direction = -1, na.value = "grey", name = "Percent\nSequence\nIdentity") +
scale_color_identity() +
labs(
title = "Normalized Edit Distance to HPRC HLA Haplotypes",
x = "Gene Haplotype",
y = "Sample"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
)
print(similarity_plot)
library(tidyr)
library(ggplot2)
library(dplyr)
# Load main heatmap data
data <- read.csv("phase_map.hiphase.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(data) <- gsub("\\.", "-", colnames(data))  # Replace dots with dashes
# Define HPRC samples and Class I genes
hprc_samples <- c("HG002", "HG01106", "HG01258", "HG01928", "HG02055", "HG02630", "HG03492", "HG03579", "NA19240", "NA20129", "NA21309")
class_I <- c("HLA-A", "HLA-B", "HLA-C")
# Convert samples and genes into factors to preserve order
sample_order <- rev(data$sample)
gene_order <- colnames(data)[-1]
# Reshape data
df_long <- pivot_longer(data, cols = -sample, names_to = "Gene", values_to = "Value")
df_long$sample <- factor(df_long$sample, levels = sample_order)
df_long$Gene <- factor(df_long$Gene, levels = gene_order)
# ✅ Load incomplete.csv FIRST
incomplete <- read.csv("incomplete.hiphase.csv", header = TRUE, stringsAsFactors = FALSE)
# Merge and calculate percent covered
df_long <- df_long %>%
left_join(incomplete, by = c("sample", "Gene" = "gene")) %>%
mutate(
largest_haploblock = as.numeric(gsub("%", "", largest_haploblock)),
percent_covered = ifelse(Value == 1, 100, largest_haploblock)
)
# Ensure order is still preserved after join
df_long$sample <- factor(df_long$sample, levels = sample_order)
df_long$Gene <- factor(df_long$Gene, levels = gene_order)
# Final plot — no annotations, just fill
test4 <- ggplot(df_long, aes(x = Gene, y = sample, fill = percent_covered)) +
geom_tile(color = "white") +
#scale_fill_gradient(low = "white", high = "red", na.value = "white",
#name = "Percent Gene\nCovered by\nLargest\nOverlapping/nHaploblock")
scale_fill_viridis_c(option = "D", direction = -1, na.value = "white",
name = "Percent Gene\nCovered by\nLargest\nOverlapping\nHaploblock")
theme_minimal() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 7),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
) +
labs(
x = "Gene",
y = "Sample"
)
print(test4)
# Load necessary libraries
library(tidyverse)
# Set working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/phasing/")
# File path for the new data
phased_genes_file <- "phased_genes.csv"
# Function to process and clean the new data
process_phased_genes <- function(file_path) {
# Read the data with correct delimiter
data <- read_tsv(file_path, col_names = TRUE) %>%  # Use read_tsv for tab-delimited files
mutate(
platform = case_when(
platform == "Revio" ~ "PacBio",
platform == "PromethION" ~ "ONT",
TRUE ~ platform
),
sample_group = case_when(
sample %in% hprc_samples ~ "HPRC",
sample %in% ihw_samples ~ "IHW",
TRUE ~ "Other"
)
) %>%
filter(sample_group != "Other") %>%  # Keep only HPRC and IHW
drop_na(num_genes)  # Remove rows with NA in num_genes
return(data)
}
# Define sample groups
hprc_samples <- c("HG002", "HG003", "HG004", "HG005", "HG01106", "HG01258",
"HG01928", "HG02055", "HG02630", "HG03492", "HG03579",
"NA19240", "NA20129", "NA21309", "NA24694", "NA24695")
ihw_samples <- c("IHW09021", "IHW09049", "IHW09071", "IHW09117", "IHW09118",
"IHW09122", "IHW09125", "IHW09175", "IHW09198", "IHW09200",
"IHW09224", "IHW09245", "IHW09251", "IHW09359", "IHW09364",
"IHW09409")
# Process the new data
phased_genes_data <- process_phased_genes(phased_genes_file)
# Manually set the x-axis order and labels
phased_genes_data <- phased_genes_data %>%
mutate(
x_group = factor(
paste(platform, sample_group),
levels = c("PacBio HPRC", "PacBio IHW", "ONT HPRC", "ONT IHW")  # Correct order
)
)
# Create the box plot using the processed data
phased_genes_plot <- ggplot(phased_genes_data, aes(x = x_group, y = num_genes, fill = x_group)) +
geom_boxplot(
alpha = 0.3, width = 0.3, outlier.shape = NA, color = "black"
) +
geom_jitter(
aes(color = x_group),
width = 0.15, height = 0, size = 2, alpha = 0.8  # Adjust jitter width to match box width
) +
scale_y_continuous(labels = scales::label_number()) +  # Adjust y-axis labels to standard numbers
scale_fill_viridis_d(option = "D", begin = 0.1, end = 0.9) +  # Viridis color for fill
scale_color_viridis_d(option = "D", begin = 0.1, end = 0.9) +  # Viridis color for jitter
labs(x = "", y = "Number of Phased\nGenes") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12, face = "bold", color = "black"),
axis.text.y = element_text(size = 8, color = "black"),
axis.title.y = element_text(size = 12, face = "bold", lineheight = 0.8),
axis.line.y = element_line(color = "black"),
axis.line.x = element_line(color = "black"),
panel.grid.major.y = element_line(color = "gray80", size = 0.5),  # Feint grid lines
panel.grid.major.x = element_blank(),  # Remove vertical grid lines
panel.grid.minor = element_blank(),
legend.position = "none"
)
# Display the plot
print(phased_genes_plot)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(patchwork)
library(viridis)
library(broom) # For regression stats
# Set directories
read_length_dir <- "/Users/matt/Documents/GitHub/mhc/scripts/visualizations/read_length/"
dotplot_dir <- "/Users/matt/Documents/GitHub/mhc/scripts/visualizations/dotplot/"
# Define sample groups
hprc_samples <- c("HG002", "HG003", "HG004", "HG005", "HG01106", "HG01258",
"HG01928", "HG02055", "HG02630", "HG03492", "HG03579",
"NA19240", "NA20129", "NA21309", "NA24694", "NA24695")
ihw_samples <- c("IHW09021", "IHW09049", "IHW09071", "IHW09117", "IHW09118",
"IHW09122", "IHW09125", "IHW09175", "IHW09198", "IHW09200",
"IHW09224", "IHW09245", "IHW09251", "IHW09359", "IHW09364",
"IHW09409")
# Process box plot data
setwd(read_length_dir)
results_data <- read.csv("results2.csv")
process_boxplot_data <- function(data, variable, rename_to) {
data %>%
rename(!!rename_to := !!sym(variable)) %>%
mutate(sample_group = case_when(
Sample %in% hprc_samples & Platform == "Revio" ~ "PacBio\nHPRC",
Sample %in% ihw_samples & Platform == "Revio" ~ "PacBio\nIHW",
Sample %in% hprc_samples & Platform == "promethion" ~ "ONT\nHPRC",
Sample %in% ihw_samples & Platform == "promethion" ~ "ONT\nIHW",
TRUE ~ "Other"
)) %>%
filter(sample_group != "Other") %>%
drop_na(!!sym(rename_to)) %>%
mutate(sample_group = factor(sample_group, levels = c("PacBio\nHPRC", "PacBio\nIHW", "ONT\nHPRC", "ONT\nIHW")))
}
read_length_data <- process_boxplot_data(results_data, "Median.Read.Length..BED.Overlapping.Reads.", "median_read_length")
depth_data <- process_boxplot_data(results_data, "Average.On.Target.Depth", "avg_on_target_depth")
proportion_data <- process_boxplot_data(results_data, "Proportion.On.Target", "proportion_on_target")
# Create box plots
create_boxplot <- function(data, y_var, y_label, y_scale = scales::comma) {
ggplot(data, aes(x = sample_group, y = !!sym(y_var), fill = sample_group)) +
geom_boxplot(alpha = 0.3, width = 0.5, outlier.shape = NA, color = "black") +
geom_jitter(aes(color = sample_group), width = 0.15, size = 0.75, alpha = 0.9) +
scale_fill_viridis_d(option = "D", begin = 0.1, end = 0.9) +
scale_color_viridis_d(option = "D", begin = 0.1, end = 0.9) +
scale_y_continuous(labels = y_scale) +
labs(x = "", y = y_label) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 8, face = "bold", color = "black"),
axis.text.y = element_text(size = 8, color = "black"),
axis.title.y = element_text(size = 8, face = "bold", lineheight = 0.8),
legend.position = "none"
)
}
median_read_length_plot <- create_boxplot(read_length_data, "median_read_length", "Median Read Length")
proportion_on_target_plot <- create_boxplot(
proportion_data,
"Enrichment",
"Fold Enrichment"
)
avg_on_target_depth_plot <- create_boxplot(depth_data, "avg_on_target_depth", "Average On-Target Depth")
# Process scatter plot data
setwd(dotplot_dir)
pacbio_data <- read.csv("pacbio_genes.csv")
promethion_data <- read.csv("promethion_genes.csv")
pacbio_long <- pacbio_data %>%
pivot_longer(
cols = starts_with("HG") | starts_with("IHW"),
names_to = "sample",
values_to = "pacbio_coverage"
)
promethion_long <- promethion_data %>%
pivot_longer(
cols = starts_with("HG") | starts_with("IHW"),
names_to = "sample",
values_to = "promethion_coverage"
)
merged_data <- pacbio_long %>%
inner_join(promethion_long, by = c("gene_name", "sample"))
# Split merged data into HPRC and IHW
hprc_data <- merged_data %>% filter(sample %in% hprc_samples)
ihw_data <- merged_data %>% filter(sample %in% ihw_samples)
# Add residuals and compute regression stats
compute_stats <- function(data) {
model <- lm(promethion_coverage ~ pacbio_coverage, data = data)
stats <- summary(model)
intercept <- coef(model)[1]
slope <- coef(model)[2]
r_squared <- stats$r.squared
p_value <- coef(summary(model))["pacbio_coverage", "Pr(>|t|)"]
equation <- paste0("y = ", round(slope, 3), "x + ", round(intercept, 3))
list(model = model, r_squared = r_squared, p_value = p_value, equation = equation)
}
add_residuals <- function(data, stats) {
data %>%
mutate(
predicted = predict(stats$model, newdata = data),
residual = promethion_coverage - predicted
)
}
hprc_stats <- compute_stats(hprc_data)
ihw_stats <- compute_stats(ihw_data)
hprc_data <- add_residuals(hprc_data, hprc_stats)
ihw_data <- add_residuals(ihw_data, ihw_stats)
# Format p-values
format_pval <- function(p_value) {
if (p_value < .Machine$double.eps) {
"< 2.2e-16"
} else {
format.pval(p_value, scientific = TRUE, digits = 3)
}
}
# Create scatter plots
scatter_plot_hprc <- ggplot(hprc_data, aes(x = pacbio_coverage, y = promethion_coverage)) +
geom_point(aes(color = abs(residual)), alpha = 0.7) +
geom_smooth(method = "lm", color = "black", se = FALSE) +
annotate(
"text",
x = 0.1 * max(hprc_data$pacbio_coverage, na.rm = TRUE),
y = 0.85 * max(hprc_data$promethion_coverage, na.rm = TRUE),
label = paste0("R² = ", round(hprc_stats$r_squared, 2), "\n",
"p = ", format_pval(hprc_stats$p_value), "\n",
hprc_stats$equation),
hjust = 0, color = "black", size = 3
) +
scale_color_viridis_c(name = "Deviation") +
labs(title = "HPRC", x = "PacBio Coverage", y = "Promethion Coverage") +
theme_minimal() +
theme(
axis.text = element_text(size = 8),
axis.title = element_text(size = 10),
legend.title = element_text(size = 8),
legend.text = element_text(size = 7)
)
scatter_plot_ihw <- ggplot(ihw_data, aes(x = pacbio_coverage, y = promethion_coverage)) +
geom_point(aes(color = abs(residual)), alpha = 0.7) +
geom_smooth(method = "lm", color = "black", se = FALSE) +
annotate(
"text",
x = 0.1 * max(ihw_data$pacbio_coverage, na.rm = TRUE),
y = 0.85 * max(ihw_data$promethion_coverage, na.rm = TRUE),
label = paste0("R² = ", round(ihw_stats$r_squared, 2), "\n",
"p = ", format_pval(ihw_stats$p_value), "\n",
ihw_stats$equation),
hjust = 0, color = "black", size = 3
) +
scale_color_viridis_c(name = "Deviation") +
labs(title = "IHW", x = "PacBio Coverage", y = "Promethion Coverage") +
theme_minimal() +
theme(
axis.text = element_text(size = 8),
axis.title = element_text(size = 10),
legend.title = element_text(size = 8),
legend.text = element_text(size = 7)
)
# Combine all plots
combined_plot <- (
(median_read_length_plot / avg_on_target_depth_plot / proportion_on_target_plot) |
(scatter_plot_hprc / scatter_plot_ihw)
)
# Display the combined plot
print(combined_plot)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(patchwork)
library(viridis)
library(readr)
library(broom)  # For regression stats
# Set directories
read_length_dir <- "/Users/matt/Documents/GitHub/mhc/scripts/visualizations/read_length/"
dotplot_dir <- "/Users/matt/Documents/GitHub/mhc/scripts/visualizations/dotplot/"
mapping_dir <- "/Users/matt/Documents/GitHub/mhc/scripts/visualizations/mapping/"
# Define sample groups
hprc_samples <- c("HG002", "HG003", "HG004", "HG005", "HG01106", "HG01258",
"HG01928", "HG02055", "HG02630", "HG03492", "HG03579",
"NA19240", "NA20129", "NA21309", "NA24694", "NA24695")
ihw_samples <- c("IHW09021", "IHW09049", "IHW09071", "IHW09117", "IHW09118",
"IHW09122", "IHW09125", "IHW09175", "IHW09198", "IHW09200",
"IHW09224", "IHW09245", "IHW09251", "IHW09359", "IHW09364",
"IHW09409")
# Function to process data for boxplots
process_boxplot_data <- function(data, variable, rename_to) {
data %>%
rename(!!rename_to := !!sym(variable)) %>%
mutate(sample_group = case_when(
Sample %in% hprc_samples & Platform == "Revio" ~ "PacBio\nHPRC",
Sample %in% ihw_samples & Platform == "Revio" ~ "PacBio\nIHW",
Sample %in% hprc_samples & Platform == "promethion" ~ "ONT\nHPRC",
Sample %in% ihw_samples & Platform == "promethion" ~ "ONT\nIHW",
TRUE ~ "Other"
)) %>%
filter(sample_group != "Other") %>%
drop_na(!!sym(rename_to)) %>%
mutate(sample_group = factor(sample_group, levels = c("PacBio\nHPRC", "PacBio\nIHW", "ONT\nHPRC", "ONT\nIHW")))
}
# Process data for existing box plots
setwd(read_length_dir)
results_data <- read.csv("results2.csv")
read_length_data <- process_boxplot_data(results_data, "Median.Read.Length..BED.Overlapping.Reads.", "median_read_length")
depth_data <- process_boxplot_data(results_data, "Average.On.Target.Depth", "avg_on_target_depth")
enrichment_data <- process_boxplot_data(results_data, "Enrichment", "fold_enrichment")
# Process data for the new "Unique Reads" box plot
setwd(mapping_dir)
revio_file <- "revio_flagstat_results.csv"
promethion_file <- "promethion_flagstat_results.csv"
revio_data <- read_csv(revio_file) %>%
mutate(
unique_reads = as.numeric(gsub(",", "", total)) - as.numeric(gsub(",", "", duplicates)),
Sample = sample,  # Rename to match expected column name
Platform = "Revio"
)
promethion_data <- read_csv(promethion_file) %>%
mutate(
unique_reads = as.numeric(gsub(",", "", total)) - as.numeric(gsub(",", "", duplicates)),
Sample = sample,  # Rename to match expected column name
Platform = "promethion"
)
unique_reads_data <- bind_rows(
process_boxplot_data(revio_data, "unique_reads", "unique_reads"),
process_boxplot_data(promethion_data, "unique_reads", "unique_reads")
)
# Create box plots
create_boxplot <- function(data, y_var, y_label, y_scale = scales::comma) {
ggplot(data, aes(x = sample_group, y = !!sym(y_var), fill = sample_group)) +
geom_boxplot(alpha = 0.3, width = 0.5, outlier.shape = NA, color = "black") +
geom_jitter(aes(color = sample_group), width = 0.15, size = 0.75, alpha = 0.9) +
scale_fill_viridis_d(option = "D", begin = 0.1, end = 0.9) +
scale_color_viridis_d(option = "D", begin = 0.1, end = 0.9) +
scale_y_continuous(labels = y_scale) +
labs(x = "", y = y_label) +
theme_minimal() +
theme(
panel.grid.minor.y = element_blank(),
axis.text.x = element_text(size = 8, face = "bold", color = "black"),
axis.text.y = element_text(size = 8, color = "black"),
axis.title.y = element_text(size = 8, face = "bold", lineheight = 0.8),
legend.position = "none"
)
}
median_read_length_plot <- create_boxplot(read_length_data, "median_read_length", "Median Read Length")
avg_on_target_depth_plot <- create_boxplot(depth_data, "avg_on_target_depth", "Average On-Target Depth")
fold_enrichment_plot <- create_boxplot(enrichment_data, "fold_enrichment", "Fold Enrichment")
unique_reads_plot <- create_boxplot(unique_reads_data, "unique_reads", "Unique Reads")
# Combine all plots
compound_plot <- (
(unique_reads_plot / avg_on_target_depth_plot / scatter_plot_hprc) | ( median_read_length_plot/ fold_enrichment_plot / scatter_plot_ihw)
)
# Display the combined plot
print(compound_plot)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(patchwork)
library(viridis)
library(readr)
library(broom)  # For regression stats
# Set directories
read_length_dir <- "/Users/matt/Documents/GitHub/mhc/scripts/visualizations/read_length/"
dotplot_dir <- "/Users/matt/Documents/GitHub/mhc/scripts/visualizations/dotplot/"
mapping_dir <- "/Users/matt/Documents/GitHub/mhc/scripts/visualizations/mapping/"
# Define sample groups
hprc_samples <- c("HG002", "HG003", "HG004", "HG005", "HG01106", "HG01258",
"HG01928", "HG02055", "HG02630", "HG03492", "HG03579",
"NA19240", "NA20129", "NA21309", "NA24694", "NA24695")
ihw_samples <- c("IHW09021", "IHW09049", "IHW09071", "IHW09117", "IHW09118",
"IHW09122", "IHW09125", "IHW09175", "IHW09198", "IHW09200",
"IHW09224", "IHW09245", "IHW09251", "IHW09359", "IHW09364",
"IHW09409")
# Function to process data for boxplots
process_boxplot_data <- function(data, variable, rename_to) {
data %>%
rename(!!rename_to := !!sym(variable)) %>%
mutate(sample_group = case_when(
Sample %in% hprc_samples & Platform == "Revio" ~ "PacBio\nHPRC",
Sample %in% ihw_samples & Platform == "Revio" ~ "PacBio\nIHW",
Sample %in% hprc_samples & Platform == "promethion" ~ "ONT\nHPRC",
Sample %in% ihw_samples & Platform == "promethion" ~ "ONT\nIHW",
TRUE ~ "Other"
)) %>%
filter(sample_group != "Other") %>%
drop_na(!!sym(rename_to)) %>%
mutate(sample_group = factor(sample_group, levels = c("PacBio\nHPRC", "PacBio\nIHW", "ONT\nHPRC", "ONT\nIHW")))
}
# Process data for existing box plots
setwd(read_length_dir)
results_data <- read.csv("results2.csv")
read_length_data <- process_boxplot_data(results_data, "Median.Read.Length..BED.Overlapping.Reads.", "median_read_length")
depth_data <- process_boxplot_data(results_data, "Average.On.Target.Depth", "avg_on_target_depth")
enrichment_data <- process_boxplot_data(results_data, "Enrichment", "fold_enrichment")
# Process data for the new "Unique Reads" box plot
setwd(mapping_dir)
revio_file <- "revio_flagstat_results.csv"
promethion_file <- "promethion_flagstat_results.csv"
revio_data <- read_csv(revio_file) %>%
mutate(
unique_reads = as.numeric(gsub(",", "", total)) - as.numeric(gsub(",", "", duplicates)),
Sample = sample,  # Rename to match expected column name
Platform = "Revio"
)
promethion_data <- read_csv(promethion_file) %>%
mutate(
unique_reads = as.numeric(gsub(",", "", total)) - as.numeric(gsub(",", "", duplicates)),
Sample = sample,  # Rename to match expected column name
Platform = "promethion"
)
unique_reads_data <- bind_rows(
process_boxplot_data(revio_data, "unique_reads", "unique_reads"),
process_boxplot_data(promethion_data, "unique_reads", "unique_reads")
)
# Create box plots
create_boxplot <- function(data, y_var, y_label, y_scale = scales::comma) {
ggplot(data, aes(x = sample_group, y = !!sym(y_var), fill = sample_group)) +
geom_boxplot(alpha = 0.3, width = 0.5, outlier.shape = NA, color = "black") +
geom_jitter(aes(color = sample_group), width = 0.15, size = 0.75, alpha = 0.9) +
scale_fill_viridis_d(option = "D", begin = 0.1, end = 0.9) +
scale_color_viridis_d(option = "D", begin = 0.1, end = 0.9) +
scale_y_continuous(labels = y_scale) +
labs(x = "", y = y_label) +
theme_minimal() +
theme(
panel.grid.minor.y = element_blank(),
axis.text.x = element_text(size = 8, face = "bold", color = "black"),
axis.text.y = element_text(size = 8, color = "black"),
axis.title.y = element_text(size = 8, face = "bold", lineheight = 0.8),
legend.position = "none"
)
}
median_read_length_plot <- create_boxplot(read_length_data, "median_read_length", "Median Read Length")
avg_on_target_depth_plot <- create_boxplot(depth_data, "avg_on_target_depth", "Average On-Target Depth")
fold_enrichment_plot <- create_boxplot(enrichment_data, "fold_enrichment", "Fold Enrichment")
unique_reads_plot <- create_boxplot(unique_reads_data, "unique_reads", "Unique Reads")
# Combine all plots
compound_plot <- (
(unique_reads_plot / avg_on_target_depth_plot / scatter_plot_hprc) | ( median_read_length_plot/ fold_enrichment_plot / scatter_plot_ihw)
)
