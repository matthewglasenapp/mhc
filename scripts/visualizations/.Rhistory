data,
cols = -sample,
names_to = "Gene",
values_to = "Value"
)
df_long$sample <- factor(df_long$sample, levels = sample_order)
df_long$Gene <- factor(df_long$Gene, levels = gene_order)
# Load incomplete.csv and format labels
incomplete <- read.csv("incomplete.hiphase.csv", header = TRUE, stringsAsFactors = FALSE)
incomplete$label <- paste0(incomplete$num_haploblocks, " (", incomplete$largest_haploblock, ")")
# Merge `incomplete.csv` with `df_long` while preserving order
df_long <- df_long %>%
left_join(incomplete, by = c("sample", "Gene" = "gene")) %>%
mutate(label = ifelse(Value == 0, label, NA))  # Only label missing/0 tiles
# Ensure factor levels remain correct after merge
df_long$sample <- factor(df_long$sample, levels = sample_order)
df_long$Gene <- factor(df_long$Gene, levels = gene_order)
# Load haplotype annotation data
hap_data <- read.csv("edit_distance.csv", header = TRUE, stringsAsFactors = FALSE)
# Create a new label column in the format (hap1, hap2)
hap_data$hap_label <- paste0("(", hap_data$hap1, ", ", hap_data$hap2, ")")
# Merge with df_long (must match on both gene and sample)
df_long <- df_long %>%
left_join(hap_data, by = c("sample", "Gene" = "gene"))
# Preserve factor levels again after merge
df_long$sample <- factor(df_long$sample, levels = sample_order)
df_long$Gene <- factor(df_long$Gene, levels = gene_order)
# Define HPRC samples and class I genes
hprc_samples <- c("HG002", "HG01106", "HG01258", "HG01928", "HG02055", "HG02630", "HG03492", "HG03579", "NA19240", "NA20129", "NA21309")
class_I <- c("HLA-A", "HLA-B", "HLA-C")
# Make long format from df_long with edit distances and alignment lengths
df_classI_long <- df_long %>%
filter(sample %in% hprc_samples, Gene %in% class_I) %>%
select(sample, Gene, hap1, hap2, alignment_length_1, alignment_length_2) %>%
mutate(
hap1 = ifelse(hap1 == "NA", NA, hap1),
hap2 = ifelse(hap2 == "NA", NA, hap2),
alignment_length_1 = as.numeric(alignment_length_1),
alignment_length_2 = as.numeric(alignment_length_2)
) %>%
pivot_longer(
cols = c(hap1, hap2),
names_to = "hap",
values_to = "edit_distance"
) %>%
mutate(
alignment_length = ifelse(hap == "hap1", alignment_length_1, alignment_length_2),
edit_distance = as.numeric(edit_distance),
similarity_score = ifelse(!is.na(edit_distance) & !is.na(alignment_length),
1 - (edit_distance / alignment_length), NA),
Gene_hap = paste0(Gene, "_", ifelse(hap == "hap1", "1", "2")),
label = case_when(
is.na(similarity_score) ~ NA_character_,
similarity_score == 1 ~ "1",
TRUE ~ sprintf("%.3f", similarity_score)
),
text_color = ifelse(is.na(similarity_score) | similarity_score < 0.9, "black", "white")
)
# Plot
similarity_plot <- ggplot(df_classI_long, aes(x = Gene_hap, y = sample, fill = similarity_score)) +
geom_tile(color = "white") +
geom_text(aes(label = label, color = text_color), size = 4, fontface = "bold", na.rm = TRUE) +
#scale_fill_gradient(high = "red", low = "white", na.value = "grey", name = #"Percent\nSequence\nIdentity") +
scale_fill_viridis_c(option = "D", direction = -1, na.value = "grey", name = "Percent\nSequence\nIdentity") +
scale_color_identity() +
labs(
title = "Normalized Edit Distance to HPRC HLA Haplotypes",
x = "Gene Haplotype",
y = "Sample"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
)
print(similarity_plot)
ggsave(filename = "test3.png", plot = similarity_plot, width = 10, height = 6)
# Plot
similarity_plot <- ggplot(df_classI_long, aes(x = Gene_hap, y = sample, fill = similarity_score)) +
geom_tile(color = "white") +
geom_text(aes(label = label, color = text_color), size = 4, fontface = "bold", na.rm = TRUE) +
#scale_fill_gradient(high = "red", low = "white", na.value = "grey", name = #"Percent\nSequence\nIdentity") +
scale_fill_viridis_c(option = "D", direction = 1, na.value = "grey", name = "Percent\nSequence\nIdentity") +
scale_color_identity() +
labs(
title = "Normalized Edit Distance to HPRC HLA Haplotypes",
x = "Gene Haplotype",
y = "Sample"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
)
print(similarity_plot)
# Define HPRC samples and class I genes
hprc_samples <- c("HG002", "HG01106", "HG01258", "HG01928", "HG02055", "HG02630", "HG03492", "HG03579", "NA19240", "NA20129", "NA21309")
class_I <- c("HLA-A", "HLA-B", "HLA-C")
# Transform df_long into long format with hap1 and hap2 as separate rows
df_classI_long <- df_long %>%
filter(sample %in% hprc_samples, Gene %in% class_I) %>%
select(sample, Gene, hap1, hap2) %>%
mutate(
hap1 = ifelse(hap1 == "NA", NA, hap1),
hap2 = ifelse(hap2 == "NA", NA, hap2)
) %>%
pivot_longer(cols = c(hap1, hap2), names_to = "hap", values_to = "edit_distance") %>%
mutate(
edit_distance = as.numeric(edit_distance),
Gene_hap = paste0(Gene, "_", ifelse(hap == "hap1", "1", "2")),
label = ifelse(is.na(edit_distance), NA_character_, as.character(edit_distance)),
text_color = ifelse(is.na(edit_distance) | edit_distance > 500, "black", "white")
)
# Plot heatmap
test2 <- ggplot(df_classI_long, aes(x = Gene_hap, y = sample, fill = edit_distance)) +
geom_tile(color = "white") +
geom_text(aes(label = label, color = text_color), size = 4, fontface = "bold", na.rm = TRUE) +
#scale_fill_gradient(low = "red", high = "white", na.value = "grey", name = "Mean Edit\n Distance") +
scale_fill_viridis_c(option = "D", direction = -1, na.value = "grey", name = "Edit Distance") +
scale_color_identity() +
labs(
title = "Mean Edit Distance to HPRC HLA Haplotypes",
x = "Gene Haplotype",
y = "Sample"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
)
print(test2)
# Define HPRC samples and class I genes
hprc_samples <- c("HG002", "HG01106", "HG01258", "HG01928", "HG02055", "HG02630", "HG03492", "HG03579", "NA19240", "NA20129", "NA21309")
class_I <- c("HLA-A", "HLA-B", "HLA-C")
# Transform df_long into long format with hap1 and hap2 as separate rows
df_classI_long <- df_long %>%
filter(sample %in% hprc_samples, Gene %in% class_I) %>%
select(sample, Gene, hap1, hap2) %>%
mutate(
hap1 = ifelse(hap1 == "NA", NA, hap1),
hap2 = ifelse(hap2 == "NA", NA, hap2)
) %>%
pivot_longer(cols = c(hap1, hap2), names_to = "hap", values_to = "edit_distance") %>%
mutate(
edit_distance = as.numeric(edit_distance),
Gene_hap = paste0(Gene, "_", ifelse(hap == "hap1", "1", "2")),
label = ifelse(is.na(edit_distance), NA_character_, as.character(edit_distance)),
text_color = ifelse(is.na(edit_distance) | edit_distance > 500, "black", "white")
)
# Plot heatmap
test2 <- ggplot(df_classI_long, aes(x = Gene_hap, y = sample, fill = edit_distance)) +
geom_tile(color = "white") +
geom_text(aes(label = label, color = text_color), size = 4, fontface = "bold", na.rm = TRUE) +
#scale_fill_gradient(low = "red", high = "white", na.value = "grey", name = "Mean Edit\n Distance") +
scale_fill_viridis_c(option = "D", direction = 1, na.value = "grey", name = "Edit Distance") +
scale_color_identity() +
labs(
title = "Mean Edit Distance to HPRC HLA Haplotypes",
x = "Gene Haplotype",
y = "Sample"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
)
print(test2)
ggsave(filename = "test2.png", plot = test2, width = 10, height = 6)
# Plot heatmap
test1 <- ggplot(df_classI, aes(x = Gene, y = sample, fill = mean_hap)) +
geom_tile(color = "white") +
geom_text(aes(label = hap_label, color = text_color), size = 4, fontface = "bold", na.rm = TRUE) +
#scale_fill_gradient(low = "red", high = "white", na.value = "grey", name = "Mean Edit Distance") +
scale_fill_viridis_c(option = "D", direction = -1, na.value = "grey", name = "Mean Edit Distance") +
scale_color_identity() +
labs(
title = "Mean Edit Distance to HPRC HLA Haplotypes",
x = "Gene",
y = "Sample"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
)
# Define HPRC samples and class I genes
hprc_samples <- c("HG002", "HG01106", "HG01258", "HG01928", "HG02055", "HG02630", "HG03492", "HG03579", "NA19240", "NA20129", "NA21309")
class_I <- c("HLA-A", "HLA-B", "HLA-C")
# Prepare data for Class I heatmap
df_classI <- df_long %>%
filter(sample %in% hprc_samples, Gene %in% class_I) %>%
mutate(
raw1 = hap1,
raw2 = hap2,
hap1 = ifelse(raw1 == "NA", 0, as.numeric(raw1)),
hap2 = ifelse(raw2 == "NA", 0, as.numeric(raw2)),
hap1 = ifelse(is.na(hap1) & !is.na(hap2), 0, hap1),
hap2 = ifelse(is.na(hap2) & !is.na(hap1), 0, hap2),
both_missing = is.na(raw1) & is.na(raw2),
mean_hap = ifelse(both_missing, NA, (hap1 + hap2) / 2),
hap_label = case_when(
is.na(raw1) & is.na(raw2) ~ NA_character_,
TRUE ~ paste0(
ifelse(is.na(raw1), "NA", raw1),
" | ",
ifelse(is.na(raw2), "NA", raw2)
)
),
text_color = ifelse(hap_label == "NA | NA" |
(sample == "NA19240" & Gene == "HLA-B" & mean_hap > 0.9),
"black", "white"))
# Plot heatmap
test1 <- ggplot(df_classI, aes(x = Gene, y = sample, fill = mean_hap)) +
geom_tile(color = "white") +
geom_text(aes(label = hap_label, color = text_color), size = 4, fontface = "bold", na.rm = TRUE) +
#scale_fill_gradient(low = "red", high = "white", na.value = "grey", name = "Mean Edit Distance") +
scale_fill_viridis_c(option = "D", direction = -1, na.value = "grey", name = "Mean Edit Distance") +
scale_color_identity() +
labs(
title = "Mean Edit Distance to HPRC HLA Haplotypes",
x = "Gene",
y = "Sample"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
)
print(test1)
# Define HPRC samples and class I genes
hprc_samples <- c("HG002", "HG01106", "HG01258", "HG01928", "HG02055", "HG02630", "HG03492", "HG03579", "NA19240", "NA20129", "NA21309")
class_I <- c("HLA-A", "HLA-B", "HLA-C")
# Prepare data for Class I heatmap
df_classI <- df_long %>%
filter(sample %in% hprc_samples, Gene %in% class_I) %>%
mutate(
raw1 = hap1,
raw2 = hap2,
hap1 = ifelse(raw1 == "NA", 0, as.numeric(raw1)),
hap2 = ifelse(raw2 == "NA", 0, as.numeric(raw2)),
hap1 = ifelse(is.na(hap1) & !is.na(hap2), 0, hap1),
hap2 = ifelse(is.na(hap2) & !is.na(hap1), 0, hap2),
both_missing = is.na(raw1) & is.na(raw2),
mean_hap = ifelse(both_missing, NA, (hap1 + hap2) / 2),
hap_label = case_when(
is.na(raw1) & is.na(raw2) ~ NA_character_,
TRUE ~ paste0(
ifelse(is.na(raw1), "NA", raw1),
" | ",
ifelse(is.na(raw2), "NA", raw2)
)
),
text_color = ifelse(hap_label == "NA | NA" |
(sample == "NA19240" & Gene == "HLA-B" & mean_hap > 0.9),
"black", "white"))
# Plot heatmap
test1 <- ggplot(df_classI, aes(x = Gene, y = sample, fill = mean_hap)) +
geom_tile(color = "white") +
geom_text(aes(label = hap_label, color = text_color), size = 4, fontface = "bold", na.rm = TRUE) +
#scale_fill_gradient(low = "red", high = "white", na.value = "grey", name = "Mean Edit Distance") +
scale_fill_viridis_c(option = "D", direction = 1, na.value = "grey", name = "Mean Edit Distance") +
scale_color_identity() +
labs(
title = "Mean Edit Distance to HPRC HLA Haplotypes",
x = "Gene",
y = "Sample"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
)
print(test1)
ggsave(filename = "test1.png", plot = test1)
library(tidyverse)
library(ggplot2)
library(gggenes)
library(patchwork)
# Set working directory (adjust as needed)
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/")
# File paths for coverage data
revio_file <- "/Users/matt/Documents/GitHub/mhc/clean_data/revio_mean_std_depth.rds"
promethion_file <- "/Users/matt/Documents/GitHub/mhc/clean_data/promethion_mean_std_depth.rds"
# Filter range for visualization
filter_range <- c(31970000, 32118000)  # Region of interest
# Load gene annotations
bed_file <- "class_III_rccs.bed"
annotations <- read.table(
bed_file, header = TRUE, sep = "\t",
col.names = c("chr", "start", "stop", "gene", "strand", "y")
)
# Debug: Check the annotations data
print("Debugging Annotations Data:")
print(head(annotations))
# Reorder genes for plotting and preserve legend order
annotations <- annotations %>%
mutate(
plot_order = ifelse(gene == "STK19", 1, 0),  # STK19 plotted last
gene = factor(gene, levels = unique(gene))  # Preserve legend order (left-to-right appearance)
) %>%
arrange(plot_order, start) %>%
mutate(y = 1)  # Keep all genes on the same y-level
# Function to process and filter coverage data
process_data <- function(file_path, filter_range, platform_name) {
data <- readRDS(file_path) %>%
mutate(window = floor(base / 100) * 100 + 50) %>%
group_by(window) %>%
summarize(
mean_depth = mean(mean_depth, na.rm = TRUE),
std_depth = mean(std_depth, na.rm = TRUE)
) %>%
rename(base = window) %>%
filter(base >= filter_range[1] & base <= filter_range[2]) %>%
mutate(platform = platform_name)  # Add platform identifier
return(data)
}
# Process coverage data for Revio and PromethION
revio_data <- process_data(revio_file, filter_range, "Revio")
promethion_data <- process_data(promethion_file, filter_range, "PromethION")
# Combine coverage data for stacked bar plot
combined_data <- bind_rows(revio_data, promethion_data)
# Debug: Check combined coverage data
print("Debugging Combined Coverage Data:")
print(head(combined_data))
# Explicitly reorder platforms for legend consistency
combined_data$platform <- factor(combined_data$platform, levels = c("PromethION", "Revio"))
# Create the stacked bar plot for mean coverage depth
coverage_plot <- ggplot(combined_data, aes(x = base, y = mean_depth, fill = platform)) +
geom_bar(stat = "identity", position = "stack", width = 100, alpha = 1) +  # Align width to 100bp bins, remove transparency
scale_fill_manual(
values = c("PromethION" = "blue", "Revio" = "red"),  # Corrected color mapping
labels = c("PromethION", "Revio")
) +
xlab("Position on Chromosome 6 (Mb)") +
ylab("Mean Coverage Depth") +
theme_classic() +
theme(
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title = element_text(size = 12, face = "bold"),
panel.grid = element_blank(),  # Ensure no grid lines
legend.position = "bottom",  # Place the legend below the plot
legend.direction = "vertical",  # Stack legend items vertically
legend.title = element_blank(),
legend.text = element_text(size = 9)  # Slightly smaller font for legend
) +
scale_x_continuous(
labels = function(x) sprintf("%.2f", x / 1e6),  # Convert to Mb
breaks = pretty(filter_range, n = 10)
) +
scale_y_continuous(expand = c(0, 0))
# Debug: Check the coverage plot
print("Rendering Coverage Depth Plot:")
print(coverage_plot)
# Create the gggenes annotation plot
annotation_plot <- ggplot(annotations, aes(
xmin = start, xmax = stop, y = y, fill = gene, forward = strand == "+"
)) +
geom_hline(yintercept = 1, color = "grey", linetype = "solid", size = 0.5) +  # Add the grey line first
geom_gene_arrow(
color = "black",  # Darker outline
size = 0.7,  # Thicker line weight
alpha = 1
) +
geom_gene_label(aes(label = gene), size = 4) +  # Adjusted size for visibility
scale_fill_brewer(palette = "Set3") +  # Use Set3 color palette
theme_void() +  # Completely remove all axis lines and ticks
theme(
legend.position = "right",  # Legend on the right
legend.title = element_blank(),
legend.text = element_text(size = 9),  # Smaller font for gene legend
legend.key.size = unit(0.6, "cm"),  # Slightly smaller legend boxes
legend.margin = margin(10, 10, 10, 10),  # Add margin around legend
plot.margin = margin(10, 10, 10, 10)  # Add margin around the plot
)
# Debug: Check the annotation plot
print("Rendering gggenes Annotation Plot:")
print(annotation_plot)
# Combine the annotation and coverage plots
final_plot <- annotation_plot / coverage_plot +
plot_layout(heights = c(1, 2), guides = "collect")  # Ensure guides are properly arranged
# Display the final combined plot
print(final_plot)
library(tidyverse)
library(ggplot2)
library(gggenes)
library(patchwork)
# Set working directory (adjust as needed)
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/")
# File paths for coverage data
revio_file <- "/Users/matt/Documents/GitHub/mhc/clean_data/revio_mean_std_depth.rds"
promethion_file <- "/Users/matt/Documents/GitHub/mhc/clean_data/promethion_mean_std_depth.rds"
# Filter range for visualization
filter_range <- c(31970000, 32118000)  # Region of interest
# Load gene annotations
bed_file <- "class_III_rccs.bed"
annotations <- read.table(
bed_file, header = TRUE, sep = "\t",
col.names = c("chr", "start", "stop", "gene", "strand", "y")
)
# Debug: Check the annotations data
print("Debugging Annotations Data:")
print(head(annotations))
# Reorder genes for plotting and preserve legend order
annotations <- annotations %>%
mutate(
plot_order = ifelse(gene == "STK19", 1, 0),  # STK19 plotted last
gene = factor(gene, levels = unique(gene))  # Preserve legend order (left-to-right appearance)
) %>%
arrange(plot_order, start) %>%
mutate(y = ifelse(strand == "+", 1, 0))  # Separate strand tracks
#mutate(y = 1)  # Keep all genes on the same y-level
# Function to process and filter coverage data
process_data <- function(file_path, filter_range, platform_name) {
data <- readRDS(file_path) %>%
mutate(window = floor(base / 100) * 100 + 50) %>%
group_by(window) %>%
summarize(
mean_depth = mean(mean_depth, na.rm = TRUE),
std_depth = mean(std_depth, na.rm = TRUE)
) %>%
rename(base = window) %>%
filter(base >= filter_range[1] & base <= filter_range[2]) %>%
mutate(platform = platform_name)  # Add platform identifier
return(data)
}
# Process coverage data for Revio and PromethION
revio_data <- process_data(revio_file, filter_range, "Revio")
promethion_data <- process_data(promethion_file, filter_range, "PromethION")
# Combine coverage data for stacked bar plot
combined_data <- bind_rows(revio_data, promethion_data)
# Debug: Check combined coverage data
print("Debugging Combined Coverage Data:")
print(head(combined_data))
# Explicitly reorder platforms for legend consistency
combined_data$platform <- factor(combined_data$platform, levels = c("PromethION", "Revio"))
# Create the stacked bar plot for mean coverage depth
coverage_plot <- ggplot(combined_data, aes(x = base, y = mean_depth, fill = platform)) +
geom_bar(stat = "identity", position = "stack", width = 100, alpha = 1) +  # Align width to 100bp bins, remove transparency
scale_fill_manual(
values = c("PromethION" = "blue", "Revio" = "red"),  # Corrected color mapping
labels = c("PromethION", "Revio")
) +
xlab("Position on Chromosome 6 (Mb)") +
ylab("Mean Coverage Depth") +
theme_classic() +
theme(
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title = element_text(size = 12, face = "bold"),
panel.grid = element_blank(),  # Ensure no grid lines
legend.position = "bottom",  # Place the legend below the plot
legend.direction = "vertical",  # Stack legend items vertically
legend.title = element_blank(),
legend.text = element_text(size = 9)  # Slightly smaller font for legend
) +
scale_x_continuous(
labels = function(x) sprintf("%.2f", x / 1e6),  # Convert to Mb
breaks = pretty(filter_range, n = 10)
) +
scale_y_continuous(expand = c(0, 0))
# Debug: Check the coverage plot
print("Rendering Coverage Depth Plot:")
print(coverage_plot)
# Create the gggenes annotation plot
annotation_plot <- ggplot(annotations, aes(
xmin = start, xmax = stop, y = y, fill = gene, forward = strand == "+"
)) +
geom_hline(yintercept = 1, color = "grey", linetype = "solid", size = 0.5) +  # Add the grey line first
geom_gene_arrow(
color = "black",  # Darker outline
size = 0.7,  # Thicker line weight
alpha = 1
) +
geom_gene_label(aes(label = gene), size = 4) +  # Adjusted size for visibility
scale_fill_brewer(palette = "Set3") +  # Use Set3 color palette
theme_void() +  # Completely remove all axis lines and ticks
theme(
legend.position = "right",  # Legend on the right
legend.title = element_blank(),
legend.text = element_text(size = 9),  # Smaller font for gene legend
legend.key.size = unit(0.6, "cm"),  # Slightly smaller legend boxes
legend.margin = margin(10, 10, 10, 10),  # Add margin around legend
plot.margin = margin(10, 10, 10, 10)  # Add margin around the plot
)
# Debug: Check the annotation plot
print("Rendering gggenes Annotation Plot:")
print(annotation_plot)
# Combine the annotation and coverage plots
final_plot <- annotation_plot / coverage_plot +
plot_layout(heights = c(1, 2), guides = "collect")  # Ensure guides are properly arranged
# Display the final combined plot
print(final_plot)
