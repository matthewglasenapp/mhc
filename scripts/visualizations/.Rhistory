library(patchwork)
# Set working directory (adjust as needed)
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/")
# File paths for coverage data
revio_file <- "/Users/matt/Documents/GitHub/mhc/clean_data/revio_mean_std_depth.rds"
promethion_file <- "/Users/matt/Documents/GitHub/mhc/clean_data/promethion_mean_std_depth.rds"
# Filter range for visualization
filter_range <- c(31970000, 32118000)  # Region of interest
# Load gene annotations
bed_file <- "class_III_rccs.bed"
annotations <- read.table(
bed_file, header = TRUE, sep = "\t",
col.names = c("chr", "start", "stop", "gene", "strand", "y")
)
# Debug: Check the annotations data
print("Debugging Annotations Data:")
print(head(annotations))
# Reorder genes for plotting and preserve legend order
annotations <- annotations %>%
mutate(
plot_order = ifelse(gene == "STK19", 1, 0),  # STK19 plotted last
gene = factor(gene, levels = unique(gene))  # Preserve legend order (left-to-right appearance)
) %>%
arrange(plot_order, start) %>%
mutate(y = 1)  # Keep all genes on the same y-level
# Function to process and filter coverage data
process_data <- function(file_path, filter_range, platform_name) {
data <- readRDS(file_path) %>%
mutate(window = floor(base / 100) * 100 + 50) %>%
group_by(window) %>%
summarize(
mean_depth = mean(mean_depth, na.rm = TRUE),
std_depth = mean(std_depth, na.rm = TRUE)
) %>%
rename(base = window) %>%
filter(base >= filter_range[1] & base <= filter_range[2]) %>%
mutate(platform = platform_name)  # Add platform identifier
return(data)
}
# Process coverage data for Revio and PromethION
revio_data <- process_data(revio_file, filter_range, "Revio")
promethion_data <- process_data(promethion_file, filter_range, "PromethION")
# Combine coverage data for stacked bar plot
combined_data <- bind_rows(revio_data, promethion_data)
# Debug: Check combined coverage data
print("Debugging Combined Coverage Data:")
print(head(combined_data))
# Explicitly reorder platforms for legend consistency
combined_data$platform <- factor(combined_data$platform, levels = c("PromethION", "Revio"))
# Create the stacked bar plot for mean coverage depth
coverage_plot <- ggplot(combined_data, aes(x = base, y = mean_depth, fill = platform)) +
geom_bar(stat = "identity", position = "stack", width = 100, alpha = 1) +  # Align width to 100bp bins, remove transparency
scale_fill_manual(
values = c("PromethION" = "blue", "Revio" = "red"),  # Corrected color mapping
labels = c("PromethION", "Revio")
) +
xlab("Position on Chromosome 6 (Mb)") +
ylab("Mean Coverage Depth") +
theme_classic() +
theme(
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title = element_text(size = 12, face = "bold"),
panel.grid = element_blank(),  # Ensure no grid lines
legend.position = "bottom",  # Place the legend below the plot
legend.direction = "vertical",  # Stack legend items vertically
legend.title = element_blank(),
legend.text = element_text(size = 9)  # Slightly smaller font for legend
) +
scale_x_continuous(
labels = function(x) sprintf("%.2f", x / 1e6),  # Convert to Mb
breaks = pretty(filter_range, n = 10)
) +
scale_y_continuous(expand = c(0, 0))
# Debug: Check the coverage plot
print("Rendering Coverage Depth Plot:")
print(coverage_plot)
# Create the gggenes annotation plot
annotation_plot <- ggplot(annotations, aes(
xmin = start, xmax = stop, y = y, fill = gene, forward = strand == "+"
)) +
geom_hline(yintercept = 1, color = "grey", linetype = "solid", size = 0.5) +  # Add the grey line first
geom_gene_arrow(
color = "black",  # Darker outline
size = 0.7,  # Thicker line weight
alpha = 1
) +
geom_gene_label(aes(label = gene), size = 4) +  # Adjusted size for visibility
scale_fill_brewer(palette = "Set3") +  # Use Set3 color palette
theme_void() +  # Completely remove all axis lines and ticks
theme(
legend.position = "right",  # Legend on the right
legend.title = element_blank(),
legend.text = element_text(size = 9),  # Smaller font for gene legend
legend.key.size = unit(0.6, "cm"),  # Slightly smaller legend boxes
legend.margin = margin(10, 10, 10, 10),  # Add margin around legend
plot.margin = margin(10, 10, 10, 10)  # Add margin around the plot
)
# Debug: Check the annotation plot
print("Rendering gggenes Annotation Plot:")
print(annotation_plot)
# Combine the annotation and coverage plots
final_plot <- annotation_plot / coverage_plot +
plot_layout(heights = c(1, 2), guides = "collect")  # Ensure guides are properly arranged
# Display the final combined plot
print(final_plot)
library(tidyverse)
library(ggplot2)
library(gggenes)
library(patchwork)
# Set working directory (adjust as needed)
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/")
# File paths for coverage data
revio_file <- "/Users/matt/Documents/GitHub/mhc/clean_data/revio_mean_std_depth.rds"
promethion_file <- "/Users/matt/Documents/GitHub/mhc/clean_data/promethion_mean_std_depth.rds"
# Filter range for visualization
filter_range <- c(31970000, 32118000)  # Region of interest
# Load gene annotations
bed_file <- "class_III_rccs.bed"
annotations <- read.table(
bed_file, header = TRUE, sep = "\t",
col.names = c("chr", "start", "stop", "gene", "strand", "y")
)
# Debug: Check the annotations data
print("Debugging Annotations Data:")
print(head(annotations))
# Reorder genes for plotting and preserve legend order
annotations <- annotations %>%
mutate(
plot_order = ifelse(gene == "STK19", 1, 0),  # STK19 plotted last
gene = factor(gene, levels = unique(gene))  # Preserve legend order (left-to-right appearance)
) %>%
arrange(plot_order, start) %>%
mutate(y = 1)  # Keep all genes on the same y-level
# Function to process and filter coverage data
process_data <- function(file_path, filter_range, platform_name) {
data <- readRDS(file_path) %>%
mutate(window = floor(base / 100) * 100 + 50) %>%
group_by(window) %>%
summarize(
mean_depth = mean(mean_depth, na.rm = TRUE),
std_depth = mean(std_depth, na.rm = TRUE)
) %>%
rename(base = window) %>%
filter(base >= filter_range[1] & base <= filter_range[2]) %>%
mutate(platform = platform_name)  # Add platform identifier
return(data)
}
# Process coverage data for Revio and PromethION
revio_data <- process_data(revio_file, filter_range, "Revio")
promethion_data <- process_data(promethion_file, filter_range, "PromethION")
# Combine coverage data for stacked bar plot
combined_data <- bind_rows(revio_data, promethion_data)
# Debug: Check combined coverage data
print("Debugging Combined Coverage Data:")
print(head(combined_data))
# Explicitly reorder platforms for legend consistency
combined_data$platform <- factor(combined_data$platform, levels = c("PromethION", "Revio"))
# Create the stacked bar plot for mean coverage depth
coverage_plot <- ggplot(combined_data, aes(x = base, y = mean_depth, fill = platform)) +
geom_bar(stat = "identity", position = "stack", width = 100, alpha = =0.25) +  # Align width to 100bp bins, remove transparency
library(tidyverse)
library(ggplot2)
library(gggenes)
library(patchwork)
# Set working directory (adjust as needed)
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/")
# File paths for coverage data
revio_file <- "/Users/matt/Documents/GitHub/mhc/clean_data/revio_mean_std_depth.rds"
promethion_file <- "/Users/matt/Documents/GitHub/mhc/clean_data/promethion_mean_std_depth.rds"
# Filter range for visualization
filter_range <- c(31970000, 32118000)  # Region of interest
# Load gene annotations
bed_file <- "class_III_rccs.bed"
annotations <- read.table(
bed_file, header = TRUE, sep = "\t",
col.names = c("chr", "start", "stop", "gene", "strand", "y")
)
# Debug: Check the annotations data
print("Debugging Annotations Data:")
print(head(annotations))
# Reorder genes for plotting and preserve legend order
annotations <- annotations %>%
mutate(
plot_order = ifelse(gene == "STK19", 1, 0),  # STK19 plotted last
gene = factor(gene, levels = unique(gene))  # Preserve legend order (left-to-right appearance)
) %>%
arrange(plot_order, start) %>%
mutate(y = 1)  # Keep all genes on the same y-level
# Function to process and filter coverage data
process_data <- function(file_path, filter_range, platform_name) {
data <- readRDS(file_path) %>%
mutate(window = floor(base / 100) * 100 + 50) %>%
group_by(window) %>%
summarize(
mean_depth = mean(mean_depth, na.rm = TRUE),
std_depth = mean(std_depth, na.rm = TRUE)
) %>%
rename(base = window) %>%
filter(base >= filter_range[1] & base <= filter_range[2]) %>%
mutate(platform = platform_name)  # Add platform identifier
return(data)
}
# Process coverage data for Revio and PromethION
revio_data <- process_data(revio_file, filter_range, "Revio")
promethion_data <- process_data(promethion_file, filter_range, "PromethION")
# Combine coverage data for stacked bar plot
combined_data <- bind_rows(revio_data, promethion_data)
# Debug: Check combined coverage data
print("Debugging Combined Coverage Data:")
print(head(combined_data))
# Explicitly reorder platforms for legend consistency
combined_data$platform <- factor(combined_data$platform, levels = c("PromethION", "Revio"))
# Create the stacked bar plot for mean coverage depth
coverage_plot <- ggplot(combined_data, aes(x = base, y = mean_depth, fill = platform)) +
geom_bar(stat = "identity", position = "stack", width = 100, alpha = 0.25) +  # Align width to 100bp bins, remove transparency
scale_fill_manual(
values = c("PromethION" = "blue", "Revio" = "red"),  # Corrected color mapping
labels = c("PromethION", "Revio")
) +
xlab("Position on Chromosome 6 (Mb)") +
ylab("Mean Coverage Depth") +
theme_classic() +
theme(
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title = element_text(size = 12, face = "bold"),
panel.grid = element_blank(),  # Ensure no grid lines
legend.position = "bottom",  # Place the legend below the plot
legend.direction = "vertical",  # Stack legend items vertically
legend.title = element_blank(),
legend.text = element_text(size = 9)  # Slightly smaller font for legend
) +
scale_x_continuous(
labels = function(x) sprintf("%.2f", x / 1e6),  # Convert to Mb
breaks = pretty(filter_range, n = 10)
) +
scale_y_continuous(expand = c(0, 0))
# Debug: Check the coverage plot
print("Rendering Coverage Depth Plot:")
print(coverage_plot)
# Create the gggenes annotation plot
annotation_plot <- ggplot(annotations, aes(
xmin = start, xmax = stop, y = y, fill = gene, forward = strand == "+"
)) +
geom_hline(yintercept = 1, color = "grey", linetype = "solid", size = 0.5) +  # Add the grey line first
geom_gene_arrow(
color = "black",  # Darker outline
size = 0.7,  # Thicker line weight
alpha = 1
) +
geom_gene_label(aes(label = gene), size = 4) +  # Adjusted size for visibility
scale_fill_brewer(palette = "Set3") +  # Use Set3 color palette
theme_void() +  # Completely remove all axis lines and ticks
theme(
legend.position = "right",  # Legend on the right
legend.title = element_blank(),
legend.text = element_text(size = 9),  # Smaller font for gene legend
legend.key.size = unit(0.6, "cm"),  # Slightly smaller legend boxes
legend.margin = margin(10, 10, 10, 10),  # Add margin around legend
plot.margin = margin(10, 10, 10, 10)  # Add margin around the plot
)
# Debug: Check the annotation plot
print("Rendering gggenes Annotation Plot:")
print(annotation_plot)
# Combine the annotation and coverage plots
final_plot <- annotation_plot / coverage_plot +
plot_layout(heights = c(1, 2), guides = "collect")  # Ensure guides are properly arranged
# Display the final combined plot
print(final_plot)
library(tidyverse)
library(ggplot2)
library(patchwork)
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/")
# Example BED file with chr, start, stop, and name
bed_file <- "regions.bed"
#bed_file <- "probe_gaps.bed"
#bed_file <- "probe_gaps.bed"
#bed_file <- "probe_gaps.bed"
annotations <- read.table(bed_file, header = FALSE, col.names = c("chr", "start", "stop", "name"))
# Process annotation data
annotations <- annotations %>%
select(start, stop, name) %>%
mutate(
midpoint = (start + stop) / 2,
name = str_replace_all(name, "\\\\n", "\n")  # Replace \n with actual newlines
)
# File paths for per-base coverage files
revio_file <- "/Users/matt/Documents/GitHub/mhc/clean_data/revio_mean_std_depth.rds"
promethion_file <- "/Users/matt/Documents/GitHub/mhc/clean_data/promethion_mean_std_depth.rds"
# Function to process and filter data
process_data <- function(file_path, filter_range) {
data <- readRDS(file_path)
collapsed_data <- data %>%
mutate(window = floor(base / 100) * 100 + 50) %>%
group_by(window) %>%
summarize(
mean_depth = mean(mean_depth, na.rm = TRUE),
std_depth = mean(std_depth, na.rm = TRUE)
) %>%
rename(base = window) %>%
filter(base >= filter_range[1] & base <= filter_range[2])
return(collapsed_data)
}
# Filter range for visualization
# Modify this to toggle between different regions of interest
# MHC Class I Part 1
filter_range <- c(29720774, 30016539)
# MHC Class I Part 2
#filter_range <- c(30000000, 30499999)
# MHC Class I Part 3
#filter_range <- c(31262000, 31389999)
# MHC Class II Part 1
#filter_range <- c(32572500, 32770000)
# MHC Class II Part 2
#filter_range <- c(33064568, 33129084)
# MHC Class III
#filter_range <- c(31519479, 32407181)
# Process data for Revio and PromethION
revio_data <- process_data(revio_file, filter_range)
promethion_data <- process_data(promethion_file, filter_range)
# Add platform label and combine data
revio_data$platform <- "Revio"
promethion_data$platform <- "PromethION"
combined_data <- bind_rows(promethion_data, revio_data)
# Create combined bar plot with overlay
coverage_plot <- ggplot(combined_data, aes(x = base, y = mean_depth, fill = platform)) +
geom_bar(stat = "identity", position = "identity", width = 80, alpha = 1) +
scale_fill_manual(values = c("Revio" = "blue", "PromethION" = "red")) +
xlab("Position on Chromosome 6 (Mb)") +
ylab("Mean\nCoverage\nDepth") +
scale_x_continuous(
limits = filter_range,
labels = function(x) sprintf("%.2f", x / 1e6),
breaks = pretty(filter_range, n = 10)
) +
scale_y_continuous(
limits = c(0, max(combined_data$mean_depth) * 1.1),
expand = c(0, 0)
) +
theme(
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black", size = 1),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.ticks = element_line(size = 0.5),
axis.title.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 8),
axis.title.y = element_text(angle = 0, size = 8, hjust = 0.5, vjust = 0.5, face = "bold"),
legend.position = "top"
)
# Create annotations plot
annotation_plot <- ggplot() +
geom_rect(
data = annotations,
aes(xmin = start, xmax = stop, ymin = 10, ymax = 13),
inherit.aes = FALSE,
size = 0.5, color = "black", fill = NA
) +
geom_text(
data = annotations,
aes(x = midpoint, y = 5, label = name),
inherit.aes = FALSE,
color = "black", vjust = 0, size = 3
) +
scale_x_continuous(
limits = filter_range,
labels = function(x) sprintf("%.2f", x / 1e6),
breaks = pretty(filter_range, n = 10)
) +
scale_y_continuous(
limits = c(0, 20),
expand = c(0, 0)
) +
theme(
axis.title = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank()
)
# Combine annotation plot and coverage plot vertically
combined_plot <- annotation_plot / coverage_plot
# Display the combined plot
print(combined_plot)
unique(diff(sort(revio_data$base)))
unique(diff(sort(promethion_data$base)))
library(tidyverse)
library(ggplot2)
library(patchwork)
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/")
# Example BED file with chr, start, stop, and name
bed_file <- "regions.bed"
#bed_file <- "probe_gaps.bed"
#bed_file <- "probe_gaps.bed"
#bed_file <- "probe_gaps.bed"
annotations <- read.table(bed_file, header = FALSE, col.names = c("chr", "start", "stop", "name"))
# Process annotation data
annotations <- annotations %>%
select(start, stop, name) %>%
mutate(
midpoint = (start + stop) / 2,
name = str_replace_all(name, "\\\\n", "\n")  # Replace \n with actual newlines
)
# File paths for per-base coverage files
revio_file <- "/Users/matt/Documents/GitHub/mhc/clean_data/revio_mean_std_depth.rds"
promethion_file <- "/Users/matt/Documents/GitHub/mhc/clean_data/promethion_mean_std_depth.rds"
# Function to process and filter data
process_data <- function(file_path, filter_range) {
data <- readRDS(file_path)
collapsed_data <- data %>%
mutate(window = floor(base / 100) * 100 + 50) %>%
group_by(window) %>%
summarize(
mean_depth = mean(mean_depth, na.rm = TRUE),
std_depth = mean(std_depth, na.rm = TRUE)
) %>%
rename(base = window) %>%
filter(base >= filter_range[1] & base <= filter_range[2])
return(collapsed_data)
}
# Filter range for visualization
# Modify this to toggle between different regions of interest
# MHC Class I Part 1
filter_range <- c(29720774, 30016539)
# MHC Class I Part 2
#filter_range <- c(30000000, 30499999)
# MHC Class I Part 3
#filter_range <- c(31262000, 31389999)
# MHC Class II Part 1
#filter_range <- c(32572500, 32770000)
# MHC Class II Part 2
#filter_range <- c(33064568, 33129084)
# MHC Class III
#filter_range <- c(31519479, 32407181)
# Process data for Revio and PromethION
revio_data <- process_data(revio_file, filter_range)
promethion_data <- process_data(promethion_file, filter_range)
# Add platform label and combine data
revio_data$platform <- "Revio"
promethion_data$platform <- "PromethION"
combined_data <- bind_rows(revio_data, promethion_data) %>%
arrange(base, desc(mean_depth))  # ensure taller drawn first
combined_data %>%
group_by(base) %>%
arrange(desc(mean_depth)) %>%
slice(1:2) %>%
print(n = 10)
# Create combined bar plot with overlay
coverage_plot <- ggplot(combined_data, aes(x = base, y = mean_depth, fill = platform)) +
geom_bar(stat = "identity", position = "identity", width = 80, alpha = 1) +
scale_fill_manual(values = c("Revio" = "blue", "PromethION" = "red")) +
xlab("Position on Chromosome 6 (Mb)") +
ylab("Mean\nCoverage\nDepth") +
scale_x_continuous(
limits = filter_range,
labels = function(x) sprintf("%.2f", x / 1e6),
breaks = pretty(filter_range, n = 10)
) +
scale_y_continuous(
limits = c(0, max(combined_data$mean_depth) * 1.1),
expand = c(0, 0)
) +
theme(
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black", size = 1),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.ticks = element_line(size = 0.5),
axis.title.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 8),
axis.title.y = element_text(angle = 0, size = 8, hjust = 0.5, vjust = 0.5, face = "bold"),
legend.position = "top"
)
# Create annotations plot
annotation_plot <- ggplot() +
geom_rect(
data = annotations,
aes(xmin = start, xmax = stop, ymin = 10, ymax = 13),
inherit.aes = FALSE,
size = 0.5, color = "black", fill = NA
) +
geom_text(
data = annotations,
aes(x = midpoint, y = 5, label = name),
inherit.aes = FALSE,
color = "black", vjust = 0, size = 3
) +
scale_x_continuous(
limits = filter_range,
labels = function(x) sprintf("%.2f", x / 1e6),
breaks = pretty(filter_range, n = 10)
) +
scale_y_continuous(
limits = c(0, 20),
expand = c(0, 0)
) +
theme(
axis.title = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank()
)
# Combine annotation plot and coverage plot vertically
combined_plot <- annotation_plot / coverage_plot
# Display the combined plot
print(combined_plot)
