axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
View(bindin_interface)
bindin_interface <- read.csv("/Users/matt/Desktop/bindin_interface.csv")
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = df_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
View(bindin_interface)
View(df_bindin)
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = bindin_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
ebr1
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = bindin_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
# Install and load required packages
library(ggtree)
install.packages("ggtree")
# Install and load required packages
library(ggtree)
install.packages("ggtree")
R
which R
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(jtools)
install.packages("jtools")
library(ggplot2)
library(jtools)
library(sjPlot)
library(sjmisc)
library(knitr)
data = read.csv("d_k2p.csv")
knitr::kable(data, format="markdown")
fig1 <- ggplot(data, aes(x=mean_sco_k2p, y=mean_D)) +
geom_point(size = 3) +
labs(x="Phylogenetic Distance (K2P Means)", y = "Mean Patterson's D Statistic") +
theme_classic() +
theme(axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"), axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))
fig1
ggsave(filename = "/Users/matt/Desktop/d_k2p.svg", plot = fig1)
fig2 <- ggplot(data, aes(x=bindin_K2P, y=mean_D)) +
geom_point(size = 3) +
labs(x="Bindin Distance (K2P)", y = "Mean Patterson's D Statistic") +
theme_classic() +
scale_x_continuous(breaks = c(0.025, 0.050, 0.075)) +
theme(axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"), axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))
ggsave(filename = "/Users/matt/Desktop/d_bnd.svg", plot = fig2)
fig3 <- ggplot(data, aes(x=ebr1_K2P, y=mean_D)) +
geom_point(size = 3) +
labs(x="EBR1 Distance (K2P)", y = "Mean Patterson's D Statistic") +
theme_classic() +
theme(axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"), axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))
ggsave(filename = "/Users/matt/Desktop/d_ebr1.svg", plot = fig3)
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/bindin/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/bindin/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/bindin/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
library(rsconnect)
renv::snapshot()
library(rsconnect)
renv::snapshot()
rsconnect::deployApp('/Users/matt/Documents/GitHub/hla_coverage/scripts/shiny_app/', appName = "hla_coverage")
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, F1),
names_to = "metric",
values_to = "value")
# Load required library
library(ggplot2)
library(tidyr)
# Set the working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/concordance/")
# Read the data without setting row.names
data <- read.table("concordance.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, F1),
names_to = "metric",
values_to = "value")
# Load necessary libraries
library(ggplot2)
library(tidyr)
library(dplyr)
# Set working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/concordance/")
# Read the CSV file
data <- read.csv("concordance.csv", header = TRUE, stringsAsFactors = FALSE)
# Clean up the numeric columns
data$recall <- as.numeric(gsub("[^0-9.]", "", data$recall))
data$precision <- as.numeric(gsub("[^0-9.]", "", data$precision))
data$F1 <- as.numeric(gsub("[^0-9.]", "", data$F1))
# Rename 'type' and 'platform' variables directly
data$type[data$type == "SNV"] <- "SNV"
data$type[data$type == "indel"] <- "Indel"
data$platform[data$platform == "revio"] <- "PacBio Revio"
data$platform[data$platform == "promethion"] <- "ONT PromethION"
# Reorder the levels of `type` and `platform`
data$type <- factor(data$type, levels = c("SNV", "Indel")) # SNV on top
data$platform <- factor(data$platform, levels = c("PacBio Revio", "ONT PromethION")) # PacBio Revio on left
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, F1),
names_to = "metric",
values_to = "value")
# Standardize the names of `metric`
data_long$metric <- recode(data_long$metric,
recall = "Recall",
precision = "Precision",
F1 = "F1")  # Ensure consistent naming
# Define a color-blind-friendly palette
cb_palette <- c("Recall" = "#D55E00", "Precision" = "#0072B2", "F1" = "#009E73")
# Map specific shapes to each metric
shape_mapping <- c("Recall" = 17, "Precision" = 15, "F1" = 16) # Triangle, square, and circle
# Plot the data
figure <- ggplot(data_long, aes(x = sample, y = value, shape = metric, color = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using reordered variables
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric",
color = "Metric"
) +
scale_shape_manual(values = shape_mapping) +
scale_color_manual(values = cb_palette) + # Apply color-blind-friendly palette
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
figure
ggsave(filename = "concordance.png", plot = figure, width=169, units = "mm")
# Read the CSV file
data <- read.csv("concordance.csv", header = TRUE, stringsAsFactors = FALSE)
View(data)
head(data)
# Load necessary libraries
library(ggplot2)
library(tidyr)
library(dplyr)
# Set working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/concordance/")
# Read the CSV file
data <- read.csv("concordance.csv", header = TRUE, stringsAsFactors = FALSE)
head(data)
# Clean up the numeric columns
data$recall <- as.numeric(gsub("[^0-9.]", "", data$recall))
data$precision <- as.numeric(gsub("[^0-9.]", "", data$precision))
data$F1 <- as.numeric(gsub("[^0-9.]", "", data$F1))
# Rename 'type' and 'platform' variables directly
data$type[data$type == "SNV"] <- "SNV"
data$type[data$type == "indel"] <- "Indel"
data$platform[data$platform == "revio"] <- "PacBio Revio"
data$platform[data$platform == "promethion"] <- "ONT PromethION"
# Reorder the levels of `type` and `platform`
data$type <- factor(data$type, levels = c("SNV", "Indel")) # SNV on top
data$platform <- factor(data$platform, levels = c("PacBio Revio", "ONT PromethION")) # PacBio Revio on left
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, F1),
names_to = "metric",
values_to = "value")
# Standardize the names of `metric`
data_long$metric <- recode(data_long$metric,
recall = "Recall",
precision = "Precision",
F1 = "F1")  # Ensure consistent naming
# Define a color-blind-friendly palette
cb_palette <- c("Recall" = "#D55E00", "Precision" = "#0072B2", "F1" = "#009E73")
# Map specific shapes to each metric
shape_mapping <- c("Recall" = 17, "Precision" = 15, "F1" = 16) # Triangle, square, and circle
# Plot the data
figure <- ggplot(data_long, aes(x = sample, y = value, shape = metric, color = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using reordered variables
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric",
color = "Metric"
) +
scale_shape_manual(values = shape_mapping) +
scale_color_manual(values = cb_palette) + # Apply color-blind-friendly palette
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
figure
# Load necessary libraries
library(ggplot2)
library(tidyr)
library(dplyr)
# Set working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/concordance/")
# Read the CSV file
data <- read.csv("concordance_results.csv", header = TRUE, stringsAsFactors = FALSE)
head(data)
# Clean up the numeric columns (if necessary)
data$recall <- as.numeric(gsub("[^0-9.]", "", data$recall))
data$precision <- as.numeric(gsub("[^0-9.]", "", data$precision))
data$f1 <- as.numeric(gsub("[^0-9.]", "", data$f1))
# Rename 'type' and 'platform' variables directly
data$type[data$type == "snp"] <- "SNV"
data$type[data$type == "indel"] <- "Indel"
data$platform[data$platform == "revio"] <- "PacBio Revio"
data$platform[data$platform == "promethion"] <- "ONT PromethION"
# Reorder the levels of `type` and `platform`
data$type <- factor(data$type, levels = c("SNV", "Indel")) # SNV on top
data$platform <- factor(data$platform, levels = c("PacBio Revio", "ONT PromethION")) # PacBio Revio on left
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, f1),
names_to = "metric",
values_to = "value")
# Standardize the names of `metric`
data_long$metric <- recode(data_long$metric,
recall = "Recall",
precision = "Precision",
f1 = "F1")  # Ensure consistent naming
# Define a color-blind-friendly palette
cb_palette <- c("Recall" = "#D55E00", "Precision" = "#0072B2", "F1" = "#009E73")
# Map specific shapes to each metric
shape_mapping <- c("Recall" = 17, "Precision" = 15, "F1" = 16) # Triangle, square, and circle
# Plot the data
figure <- ggplot(data_long, aes(x = sample, y = value, shape = metric, color = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using reordered variables
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric",
color = "Metric"
) +
scale_shape_manual(values = shape_mapping) +
scale_color_manual(values = cb_palette) + # Apply color-blind-friendly palette
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Display the plot
figure
# Load necessary libraries
library(ggplot2)
library(tidyr)
library(dplyr)
# Set working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/concordance/")
# Read the CSV file
data <- read.csv("concordance_results.csv", header = TRUE, stringsAsFactors = FALSE)
head(data)
# Clean up the numeric columns (if necessary)
data$recall <- as.numeric(gsub("[^0-9.]", "", data$recall))
data$precision <- as.numeric(gsub("[^0-9.]", "", data$precision))
data$f1 <- as.numeric(gsub("[^0-9.]", "", data$f1))
# Rename 'type' and 'platform' variables directly
data$type[data$type == "snp"] <- "SNV"
data$type[data$type == "indel"] <- "Indel"
data$platform[data$platform == "revio"] <- "PacBio Revio"
data$platform[data$platform == "promethion"] <- "ONT PromethION"
# Reorder the levels of `type` and `platform`
data$type <- factor(data$type, levels = c("SNV", "Indel")) # SNV on top
data$platform <- factor(data$platform, levels = c("PacBio Revio", "ONT PromethION")) # PacBio Revio on left
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, f1),
names_to = "metric",
values_to = "value")
# Standardize the names of `metric`
data_long$metric <- recode(data_long$metric,
recall = "Recall",
precision = "Precision",
f1 = "F1")  # Ensure consistent naming
# Define a color-blind-friendly palette
cb_palette <- c("Recall" = "#D55E00", "Precision" = "#0072B2", "F1" = "#009E73")
# Map specific shapes to each metric
shape_mapping <- c("Recall" = 17, "Precision" = 15, "F1" = 16) # Triangle, square, and circle
# Plot the data
figure <- ggplot(data_long, aes(x = sample, y = value, shape = metric, color = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using reordered variables
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric",
color = "Metric"
) +
scale_shape_manual(values = shape_mapping) +
scale_color_manual(values = cb_palette) + # Apply color-blind-friendly palette
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Display the plot
figure
ggsave(filename = "histogram_bar_plot.pdf", plot = figure, width = 169, units = "mm")
ggsave(filename = "histogram_bar_plot.png", plot = figure, width = 169, units = "mm")
ggsave(filename = "histogram_bar_plot.png", plot = figure, width = 169, units = "mm")
figure
ggsave(filename = "concordance.pdf", plot = figure, width = 169, units = "mm")
ggsave(filename = "concordance.png", plot = figure, width = 169, units = "mm")
# Load necessary libraries
library(ggplot2)
library(tidyr)
library(dplyr)
# Set working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/concordance/")
# Read the CSV file
data <- read.csv("concordance_results.csv", header = TRUE, stringsAsFactors = FALSE)
head(data)
# Clean up the numeric columns (if necessary)
data$recall <- as.numeric(gsub("[^0-9.]", "", data$recall))
data$precision <- as.numeric(gsub("[^0-9.]", "", data$precision))
data$f1 <- as.numeric(gsub("[^0-9.]", "", data$f1))
# Rename 'type' and 'platform' variables directly
data$type[data$type == "snp"] <- "SNV"
data$type[data$type == "indel"] <- "Indel"
data$platform[data$platform == "revio"] <- "PacBio Revio"
data$platform[data$platform == "promethion"] <- "ONT PromethION"
# Reorder the levels of `type` and `platform`
data$type <- factor(data$type, levels = c("SNV", "Indel")) # SNV on top
data$platform <- factor(data$platform, levels = c("PacBio Revio", "ONT PromethION")) # PacBio Revio on left
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, f1),
names_to = "metric",
values_to = "value")
# Standardize the names of `metric`
data_long$metric <- recode(data_long$metric,
recall = "Recall",
precision = "Precision",
f1 = "F1")  # Ensure consistent naming
# Define a color-blind-friendly palette
cb_palette <- c("Recall" = "#D55E00", "Precision" = "#0072B2", "F1" = "#009E73")
# Map specific shapes to each metric
shape_mapping <- c("Recall" = 17, "Precision" = 15, "F1" = 16) # Triangle, square, and circle
# Plot the data
figure <- ggplot(data_long, aes(x = sample, y = value, shape = metric, color = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using reordered variables
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric",
color = "Metric"
) +
scale_shape_manual(values = shape_mapping) +
scale_color_manual(values = cb_palette) + # Apply color-blind-friendly palette
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Display the plot
figure
