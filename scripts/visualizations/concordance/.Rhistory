legend.title = element_blank()
)
bindin
View(df_bindin)
bindin_interface <- read.csv("/Users/matt/Desktop/bindin_interface.csv")
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = df_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
View(bindin_interface)
bindin_interface <- read.csv("/Users/matt/Desktop/bindin_interface.csv")
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = df_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
View(bindin_interface)
View(df_bindin)
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = bindin_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
ebr1
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = bindin_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
# Install and load required packages
library(ggtree)
install.packages("ggtree")
# Install and load required packages
library(ggtree)
install.packages("ggtree")
R
which R
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(jtools)
install.packages("jtools")
library(ggplot2)
library(jtools)
library(sjPlot)
library(sjmisc)
library(knitr)
data = read.csv("d_k2p.csv")
knitr::kable(data, format="markdown")
fig1 <- ggplot(data, aes(x=mean_sco_k2p, y=mean_D)) +
geom_point(size = 3) +
labs(x="Phylogenetic Distance (K2P Means)", y = "Mean Patterson's D Statistic") +
theme_classic() +
theme(axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"), axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))
fig1
ggsave(filename = "/Users/matt/Desktop/d_k2p.svg", plot = fig1)
fig2 <- ggplot(data, aes(x=bindin_K2P, y=mean_D)) +
geom_point(size = 3) +
labs(x="Bindin Distance (K2P)", y = "Mean Patterson's D Statistic") +
theme_classic() +
scale_x_continuous(breaks = c(0.025, 0.050, 0.075)) +
theme(axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"), axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))
ggsave(filename = "/Users/matt/Desktop/d_bnd.svg", plot = fig2)
fig3 <- ggplot(data, aes(x=ebr1_K2P, y=mean_D)) +
geom_point(size = 3) +
labs(x="EBR1 Distance (K2P)", y = "Mean Patterson's D Statistic") +
theme_classic() +
theme(axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"), axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))
ggsave(filename = "/Users/matt/Desktop/d_ebr1.svg", plot = fig3)
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/bindin/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/bindin/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/bindin/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
library(rsconnect)
renv::snapshot()
library(rsconnect)
renv::snapshot()
rsconnect::deployApp('/Users/matt/Documents/GitHub/hla_coverage/scripts/shiny_app/', appName = "hla_coverage")
install.packages("devtools", dependencies = TRUE)
library(devtools)
library(devtools)
devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
#devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
library(COMICS)
launchApp()
install.packages("ICS")
library(devtools)
#devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
library(COMICS)
launchApp()
install.packages("moments")
library(devtools)
#devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
library(COMICS)
launchApp()
install.packages("‘ICSOutlier’")
install.packages("ICSOutlier")
library(devtools)
#devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
library(COMICS)
launchApp()
install.packages(c("shiny", "ggplot2", "tidyr", "bslib", "mvtnorm", "ICS", "moments", "ICSOutlier"), dependencies = TRUE)
install.packages(c("shiny", "ggplot2", "tidyr", "bslib", "mvtnorm", "ICS", "moments", "ICSOutlier"), dependencies = TRUE)
install.packages(c("shiny", "ggplot2", "tidyr", "bslib", "mvtnorm", "ICS", "moments", "ICSOutlier"), dependencies = TRUE)
install.packages(c("shiny", "ggplot2", "tidyr", "bslib", "mvtnorm", "ICS", "moments", "ICSOutlier"), dependencies = TRUE)
library(devtools)
#devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
library(COMICS)
launchApp()
install.packages("shinythemes")
library(devtools)
#devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
library(COMICS)
launchApp()
library(devtools)
#devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
library(COMICS)
launchApp()
library(devtools)
#devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
library(COMICS)
launchApp()
remove.packages("COMICS")
install.packages(c("shiny", "ggplot2", "tidyr", "bslib", "mvtnorm", "ICS", "moments", "ICSOutlier"), dependencies = TRUE)
install.packages(c("shiny", "ggplot2", "tidyr", "bslib", "mvtnorm", "ICS", "moments", "ICSOutlier"), dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
devtools::install_github("oeco28/new_COMICS", build_vignettes = FALSE)
library(COMICS)
library(devtools)
library(COMICS)
run_comics()
library(ggplot2)
library(ggrepel)
library(dplyr)
# Create a simple data frame of steps and coordinates
workflow_steps <- data.frame(
step = c(
"Demultiplexing\n(Dorado / Lima)",
"Adapter Removal\n(Porechop_ABI / Lima)",
"Quality Trimming\n(Prowler)",
"Mapping to Reference\n(minimap2)",
"Quality Control\n(Retain Primary Alignments)\n(Exclude Duplicates)",
"Variant Calling\n(DeepVariant + pbsv + pbtrgt / Clair3 + Sniffles)",
"Phasing\n(HiPhase / LongPhase)",
"FASTA Generation\n(HLA Pipeline)"
),
x = 1:8,
y = rep(0, 8)
)
# Arrows: Create a separate data frame for segment coordinates
arrows <- data.frame(
x = 1:7,
xend = 2:8,
y = rep(0, 7),
yend = rep(0, 7)
)
# Make the plot
p <- ggplot() +
geom_text(data = workflow_steps, aes(x = x, y = y, label = step),
size = 4, fontface = "bold", lineheight = 0.9, vjust = -1) +
geom_segment(data = arrows, aes(x = x, xend = xend, y = y, yend = yend),
arrow = arrow(length = unit(0.25, "cm")), size = 0.8) +
xlim(0.5, 8.5) +
ylim(-0.5, 1.5) +
theme_void() +
theme(
plot.margin = margin(20, 20, 20, 20),
plot.title = element_text(hjust = 0.5, face = "bold", size = 16)
) +
ggtitle("HLA Haplotyping Workflow (ONT and PacBio)")
print(p)
x <- c(557769, 401179, 283210, 226171, 445841, 459239, 476, 375793, 316964, 274918,
243427, 113398, 167798, 465662, 380881, 458999, 186484, 253825, 506101,
145668, 610765, 97855, 888715, 502864, 244379, 372735, 442819, 467481,
42239, 245532, 789317, 81047, 292962)
y <- c(1212896, 942780, 614622, 397233, 797123, 741402, 3474, 629327, 564763, 450805,
759844, 193261, 392201, 1092009, 721164, 760718, 406359, 2000237, 4527533,
1144792, 5309266, 1170102, 5566497, 3995232, 2085419, 2572146, 3909344,
4435269, 868210, 2511645, 5731326, 1020007, 2470494)
data <- data.frame(x, y)
model <- lm(y ~ x, data = data)
summary(model)
plot(data$x, data$y, main="Linear Regression", xlab="X", ylab="Y", pch=19)
abline(model, col="red", lwd=2)
cor(x, y, method = "pearson")
cor(x, y, method = "spearman")
pacbio_hprc <- c(557769, 401179, 283210, 226171, 445841, 459239, 476, 375793, 316964, 274918, 243427, 113398, 167798, 465662, 380881, 458999, 186484)
pacbio_ihw <- c(253825, 506101, 145668, 610765, 97855, 888715, 502864, 244379, 372735, 442819, 467481, 42239, 245532, 789317, 81047, 292962)
ont_hprc <- c(1212896, 942780, 614622, 397233, 797123, 741402, 3474, 629327, 564763, 450805, 759844, 193261, 392201, 1092009, 721164, 760718, 406359)
ont_ihw <- c(2000237, 4527533, 1144792, 5309266, 1170102, 5566497, 3995232, 2085419, 2572146, 3909344, 4435269, 868210, 2511645, 5731326, 1020007, 2470494)
cor(pacbio_hprc, ont_hprc, method = "pearson")
cor(pacbio_ihw, ont_ihw, method = "spearman")
plot(x, y, col = c(rep("blue", length(pacbio_hprc)), rep("red", length(pacbio_ihw))), pch = 19)
abline(lm(ont_hprc ~ pacbio_hprc), col = "blue")
abline(lm(ont_ihw ~ pacbio_ihw), col = "red")
pacbio_hprc <- c(557769, 401179, 283210, 226171, 445841, 459239, 476, 375793, 316964, 274918, 243427, 113398, 167798, 465662, 380881, 458999, 186484)
pacbio_ihw <- c(253825, 506101, 145668, 610765, 97855, 888715, 502864, 244379, 372735, 442819, 467481, 42239, 245532, 789317, 81047, 292962)
ont_hprc <- c(1212896, 942780, 614622, 397233, 797123, 741402, 3474, 629327, 564763, 450805, 759844, 193261, 392201, 1092009, 721164, 760718, 406359)
ont_ihw <- c(2000237, 4527533, 1144792, 5309266, 1170102, 5566497, 3995232, 2085419, 2572146, 3909344, 4435269, 868210, 2511645, 5731326, 1020007, 2470494)
cor(pacbio_hprc, ont_hprc, method = "pearson")
cor(pacbio_ihw, ont_ihw, method = "pearson")
cor(pacbio_hprc, ont_hprc, method = "spearman")
cor(pacbio_ihw, ont_ihw, method = "spearman")
# Load necessary libraries
library(ggplot2)
library(tidyr)
library(dplyr)
# Set working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/concordance/")
# Read the CSV file
data <- read.csv("concordance_results.csv", header = TRUE, stringsAsFactors = FALSE)
head(data)
# Clean up the numeric columns (if necessary)
data$recall <- as.numeric(gsub("[^0-9.]", "", data$recall))
data$precision <- as.numeric(gsub("[^0-9.]", "", data$precision))
data$f1 <- as.numeric(gsub("[^0-9.]", "", data$f1))
# Rename 'type' and 'platform' variables directly
data$type[data$type == "snp"] <- "SNV"
data$type[data$type == "indel"] <- "Indel"
data$platform[data$platform == "revio"] <- "PacBio Revio"
data$platform[data$platform == "promethion"] <- "ONT PromethION"
# Reorder the levels of `type` and `platform`
data$type <- factor(data$type, levels = c("SNV", "Indel")) # SNV on top
data$platform <- factor(data$platform, levels = c("PacBio Revio", "ONT PromethION")) # PacBio Revio on left
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, f1),
names_to = "metric",
values_to = "value")
# Standardize the names of `metric`
data_long$metric <- recode(data_long$metric,
recall = "Recall",
precision = "Precision",
f1 = "F1")  # Ensure consistent naming
# Define a color-blind-friendly palette
cb_palette <- c("Recall" = "#D55E00", "Precision" = "#0072B2", "F1" = "#009E73")
# Map specific shapes to each metric
shape_mapping <- c("Recall" = 17, "Precision" = 15, "F1" = 16) # Triangle, square, and circle
# Plot the data
figure <- ggplot(data_long, aes(x = sample, y = value, shape = metric, color = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using reordered variables
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric",
color = "Metric"
) +
scale_shape_manual(values = shape_mapping) +
scale_color_manual(values = cb_palette) + # Apply color-blind-friendly palette
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Display the plot
figure
# Load necessary libraries
library(ggplot2)
library(tidyr)
library(dplyr)
# Set working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/concordance/")
# Read the CSV file
data <- read.csv("concordance_results.csv", header = TRUE, stringsAsFactors = FALSE)
head(data)
# Clean up the numeric columns (if necessary)
data$recall <- as.numeric(gsub("[^0-9.]", "", data$recall))
data$precision <- as.numeric(gsub("[^0-9.]", "", data$precision))
data$f1 <- as.numeric(gsub("[^0-9.]", "", data$f1))
# Rename 'type' and 'platform' variables directly
data$type[data$type == "snp"] <- "SNV"
data$type[data$type == "indel"] <- "Indel"
data$platform[data$platform == "revio"] <- "PacBio Revio"
data$platform[data$platform == "promethion"] <- "ONT PromethION"
# Reorder the levels of `type` and `platform`
data$type <- factor(data$type, levels = c("SNV", "Indel")) # SNV on top
data$platform <- factor(data$platform, levels = c("PacBio Revio", "ONT PromethION")) # PacBio Revio on left
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, f1),
names_to = "metric",
values_to = "value")
# Standardize the names of `metric`
data_long$metric <- recode(data_long$metric,
recall = "Recall",
precision = "Precision",
f1 = "F1")  # Ensure consistent naming
# Define a color-blind-friendly palette
cb_palette <- c("Recall" = "#D55E00", "Precision" = "#0072B2", "F1" = "#009E73")
# Map specific shapes to each metric
shape_mapping <- c("Recall" = 17, "Precision" = 15, "F1" = 16) # Triangle, square, and circle
# Plot the data
figure <- ggplot(data_long, aes(x = sample, y = value, shape = metric, color = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using reordered variables
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric",
color = "Metric"
) +
scale_shape_manual(values = shape_mapping) +
scale_color_manual(values = cb_palette) + # Apply color-blind-friendly palette
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Display the plot
figure
ggsave(filename = "concordance.pdf", plot = figure, width = 169, units = "mm")
figure <- ggplot(data_long, aes(x = sample, y = value, shape = metric, color = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using reordered variables
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric",
color = "Metric"
) +
scale_shape_manual(values = shape_mapping) +
scale_color_manual(values = cb_palette) + # Apply color-blind-friendly palette
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = top
)
figure <- ggplot(data_long, aes(x = sample, y = value, shape = metric, color = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using reordered variables
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric",
color = "Metric"
) +
scale_shape_manual(values = shape_mapping) +
scale_color_manual(values = cb_palette) + # Apply color-blind-friendly palette
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "top"
)
# Display the plot
figure
ggsave(filename = "concordance.pdf", plot = figure)
ggsave(filename = "concordance.png", plot = figure)
