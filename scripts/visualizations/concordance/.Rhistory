) +
scale_shape_manual(values = c(16, 17, 18)) +
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold")
)
# Load necessary libraries
library(ggplot2)
library(tidyr)
library(dplyr)
# Set working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/concordance/")
# Read the CSV file
data <- read.csv("concordance.csv", header = TRUE, stringsAsFactors = FALSE)
# Clean up the numeric columns: strip non-numeric characters and convert to numeric
data$recall <- as.numeric(gsub("[^0-9.]", "", data$recall))
data$precision <- as.numeric(gsub("[^0-9.]", "", data$precision))
data$F1 <- as.numeric(gsub("[^0-9.]", "", data$F1))
# Check for problematic rows (optional)
problematic_rows <- data[!complete.cases(data), ]
if (nrow(problematic_rows) > 0) {
print("Problematic rows found:")
print(problematic_rows)
} else {
print("All rows are clean!")
}
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, F1),
names_to = "metric",
values_to = "value")
# Reorder the levels of `type` and `platform`
data_long$type <- factor(data_long$type, levels = c("SNV", "indel")) # SNPs (SNV) on top
data_long$platform <- factor(data_long$platform, levels = c("revio", "promethion")) # Revio on the left
# Define custom labels for facets
custom_labels <- list(
type = c(SNV = "Single Nucleotide Variant", indel = "Insertion/Deletion"),
platform = c(revio = "PacBio Revio", promethion = "Oxford Nanopore PromethION")
)
# Function to apply custom labels
facet_labeller <- function(variable, value) {
if (variable == "type") {
return(custom_labels$type[value])
} else if (variable == "platform") {
return(custom_labels$platform[value])
} else {
return(value) # Default fallback
}
}
# Plot the data
ggplot(data_long, aes(x = sample, y = value, shape = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y", labeller = labeller(.rows = facet_labeller, .cols = facet_labeller)) +
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric"
) +
scale_shape_manual(values = c(16, 17, 18)) +
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold")
)
# Load necessary libraries
library(ggplot2)
library(tidyr)
library(dplyr)
# Set working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/concordance/")
# Read the CSV file
data <- read.csv("concordance.csv", header = TRUE, stringsAsFactors = FALSE)
# Clean up the numeric columns: strip non-numeric characters and convert to numeric
data$recall <- as.numeric(gsub("[^0-9.]", "", data$recall))
data$precision <- as.numeric(gsub("[^0-9.]", "", data$precision))
data$F1 <- as.numeric(gsub("[^0-9.]", "", data$F1))
# Check for problematic rows (optional)
problematic_rows <- data[!complete.cases(data), ]
if (nrow(problematic_rows) > 0) {
print("Problematic rows found:")
print(problematic_rows)
} else {
print("All rows are clean!")
}
# Rename 'type' and 'platform' variables directly
data$type[data$type == "SNV"] <- "Single Nucleotide Variant"
data$type[data$type == "indel"] <- "Insertion/Deletion"
data$platform[data$platform == "revio"] <- "PacBio Revio"
data$platform[data$platform == "promethion"] <- "ONT PromethION"
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, F1),
names_to = "metric",
values_to = "value")
# Plot the data
ggplot(data_long, aes(x = sample, y = value, shape = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using renamed variables
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric"
) +
scale_shape_manual(values = c(16, 17, 18)) +
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold")
)
# Load necessary libraries
library(ggplot2)
library(tidyr)
library(dplyr)
# Set working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/concordance/")
# Read the CSV file
data <- read.csv("concordance.csv", header = TRUE, stringsAsFactors = FALSE)
# Clean up the numeric columns: strip non-numeric characters and convert to numeric
data$recall <- as.numeric(gsub("[^0-9.]", "", data$recall))
data$precision <- as.numeric(gsub("[^0-9.]", "", data$precision))
data$F1 <- as.numeric(gsub("[^0-9.]", "", data$F1))
# Check for problematic rows (optional)
problematic_rows <- data[!complete.cases(data), ]
if (nrow(problematic_rows) > 0) {
print("Problematic rows found:")
print(problematic_rows)
} else {
print("All rows are clean!")
}
# Rename 'type' and 'platform' variables directly
data$type[data$type == "SNV"] <- "SNV"
data$type[data$type == "indel"] <- "Indel"
data$platform[data$platform == "revio"] <- "PacBio Revio"
data$platform[data$platform == "promethion"] <- "ONT PromethION"
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, F1),
names_to = "metric",
values_to = "value")
# Plot the data
ggplot(data_long, aes(x = sample, y = value, shape = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using renamed variables
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric"
) +
scale_shape_manual(values = c(16, 17, 18)) +
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold")
)
# Load necessary libraries
library(ggplot2)
library(tidyr)
library(dplyr)
# Set working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/concordance/")
# Read the CSV file
data <- read.csv("concordance.csv", header = TRUE, stringsAsFactors = FALSE)
# Clean up the numeric columns: strip non-numeric characters and convert to numeric
data$recall <- as.numeric(gsub("[^0-9.]", "", data$recall))
data$precision <- as.numeric(gsub("[^0-9.]", "", data$precision))
data$F1 <- as.numeric(gsub("[^0-9.]", "", data$F1))
# Check for problematic rows (optional)
problematic_rows <- data[!complete.cases(data), ]
if (nrow(problematic_rows) > 0) {
print("Problematic rows found:")
print(problematic_rows)
} else {
print("All rows are clean!")
}
# Rename 'type' and 'platform' variables directly
data$type[data$type == "SNV"] <- "SNV"
data$type[data$type == "indel"] <- "Indel"
data$platform[data$platform == "revio"] <- "PacBio Revio"
data$platform[data$platform == "promethion"] <- "ONT PromethION"
# Reorder the levels of `type` and `platform` for correct facet ordering
data$type <- factor(data$type, levels = c("SNV", "Indel")) # SNV on top
data$platform <- factor(data$platform, levels = c("PacBio Revio", "ONT PromethION")) # PacBio Revio on left
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, F1),
names_to = "metric",
values_to = "value")
# Plot the data
ggplot(data_long, aes(x = sample, y = value, shape = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using reordered variables
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric"
) +
scale_shape_manual(values = c(16, 17, 18)) +
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold")
)
# Load necessary libraries
library(ggplot2)
library(tidyr)
library(dplyr)
# Set working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/concordance/")
# Read the CSV file
data <- read.csv("concordance.csv", header = TRUE, stringsAsFactors = FALSE)
# Clean up the numeric columns: strip non-numeric characters and convert to numeric
data$recall <- as.numeric(gsub("[^0-9.]", "", data$recall))
data$precision <- as.numeric(gsub("[^0-9.]", "", data$precision))
data$F1 <- as.numeric(gsub("[^0-9.]", "", data$F1))
# Check for problematic rows (optional)
problematic_rows <- data[!complete.cases(data), ]
if (nrow(problematic_rows) > 0) {
print("Problematic rows found:")
print(problematic_rows)
} else {
print("All rows are clean!")
}
# Rename 'type' and 'platform' variables directly
data$type[data$type == "SNV"] <- "SNV"
data$type[data$type == "indel"] <- "Indel"
data$platform[data$platform == "revio"] <- "PacBio Revio"
data$platform[data$platform == "promethion"] <- "ONT PromethION"
# Reorder the levels of `type` and `platform` for correct facet ordering
data$type <- factor(data$type, levels = c("SNV", "Indel")) # SNV on top
data$platform <- factor(data$platform, levels = c("PacBio Revio", "ONT PromethION")) # PacBio Revio on left
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, F1),
names_to = "metric",
values_to = "value")
# Define a color-blind-friendly palette
cb_palette <- c("Recall" = "#D55E00", "Precision" = "#0072B2", "F1" = "#009E73")
# Map specific shapes to each metric
shape_mapping <- c("Recall" = 17, "Precision" = 15, "F1" = 16) # Triangle, square, and circle
# Plot the data
ggplot(data_long, aes(x = sample, y = value, shape = metric, color = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using reordered variables
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric",
color = "Metric"
) +
scale_shape_manual(values = shape_mapping) +
scale_color_manual(values = cb_palette) + # Apply color-blind-friendly palette
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, F1),
names_to = "metric",
values_to = "value")
# Standardize the names of `metric`
data_long$metric <- recode(data_long$metric,
recall = "Recall",
precision = "Precision",
F1 = "F1")  # Ensure consistent naming
# Define a color-blind-friendly palette
cb_palette <- c("Recall" = "#D55E00", "Precision" = "#0072B2", "F1" = "#009E73")
# Map specific shapes to each metric
shape_mapping <- c("Recall" = 17, "Precision" = 15, "F1" = 16) # Triangle, square, and circle
# Plot the data
ggplot(data_long, aes(x = sample, y = value, shape = metric, color = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using reordered variables
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric",
color = "Metric"
) +
scale_shape_manual(values = shape_mapping) +
scale_color_manual(values = cb_palette) + # Apply color-blind-friendly palette
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Plot the data
figure <- ggplot(data_long, aes(x = sample, y = value, shape = metric, color = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using reordered variables
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric",
color = "Metric"
) +
scale_shape_manual(values = shape_mapping) +
scale_color_manual(values = cb_palette) + # Apply color-blind-friendly palette
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
ggsave(filename = "concordance.pdf", plot = figure, width=169, units = "mm")
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, F1),
names_to = "metric",
values_to = "value")
# Standardize the names of `metric`
data_long$metric <- recode(data_long$metric,
recall = "Recall",
precision = "Precision",
F1 = "F1")  # Ensure consistent naming
# Define a color-blind-friendly palette
cb_palette <- c("Recall" = "#D55E00", "Precision" = "#0072B2", "F1" = "#009E73")
# Map specific shapes to each metric
shape_mapping <- c("Recall" = 17, "Precision" = 15, "F1" = 16) # Triangle, square, and circle
# Load necessary libraries
library(ggplot2)
library(tidyr)
library(dplyr)
library(scales) # Required for break formatting
# Set working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/concordance/")
# Read the CSV file
data <- read.csv("concordance.csv", header = TRUE, stringsAsFactors = FALSE)
# Clean up the numeric columns: strip non-numeric characters and convert to numeric
data$recall <- as.numeric(gsub("[^0-9.]", "", data$recall))
data$precision <- as.numeric(gsub("[^0-9.]", "", data$precision))
data$F1 <- as.numeric(gsub("[^0-9.]", "", data$F1))
# Rename 'type' and 'platform' variables directly
data$type[data$type == "SNV"] <- "SNV"
data$type[data$type == "indel"] <- "Indel"
data$platform[data$platform == "revio"] <- "PacBio Revio"
data$platform[data$platform == "promethion"] <- "ONT PromethION"
# Reorder the levels of `type` and `platform`
data$type <- factor(data$type, levels = c("SNV", "Indel")) # SNV on top
data$platform <- factor(data$platform, levels = c("PacBio Revio", "ONT PromethION")) # PacBio Revio on left
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, F1),
names_to = "metric",
values_to = "value")
# Standardize the names of `metric`
data_long$metric <- recode(data_long$metric,
recall = "Recall",
precision = "Precision",
F1 = "F1")
# Define a color-blind-friendly palette
cb_palette <- c("Recall" = "#D55E00", "Precision" = "#0072B2", "F1" = "#009E73")
# Map specific shapes to each metric
shape_mapping <- c("Recall" = 17, "Precision" = 15, "F1" = 16) # Triangle, square, and circle
# Plot the data
ggplot(data_long, aes(x = sample, y = value, shape = metric, color = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using reordered variables
scale_y_continuous(
breaks = function(y) {
ifelse(unique(data_long$type) == "Indel", c(0.85, 0.9, 0.95, 1.0), pretty(y))
}
) +
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric",
color = "Metric"
) +
scale_shape_manual(values = shape_mapping) +
scale_color_manual(values = cb_palette) + # Apply color-blind-friendly palette
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, F1),
names_to = "metric",
values_to = "value")
# Standardize the names of `metric`
data_long$metric <- recode(data_long$metric,
recall = "Recall",
precision = "Precision",
F1 = "F1")  # Ensure consistent naming
# Define a color-blind-friendly palette
cb_palette <- c("Recall" = "#D55E00", "Precision" = "#0072B2", "F1" = "#009E73")
# Map specific shapes to each metric
shape_mapping <- c("Recall" = 17, "Precision" = 15, "F1" = 16) # Triangle, square, and circle
# Load necessary libraries
library(ggplot2)
library(tidyr)
library(dplyr)
library(scales) # Required for break formatting
# Set working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/concordance/")
# Read the CSV file
data <- read.csv("concordance.csv", header = TRUE, stringsAsFactors = FALSE)
# Clean up the numeric columns: strip non-numeric characters and convert to numeric
data$recall <- as.numeric(gsub("[^0-9.]", "", data$recall))
data$precision <- as.numeric(gsub("[^0-9.]", "", data$precision))
data$F1 <- as.numeric(gsub("[^0-9.]", "", data$F1))
# Rename 'type' and 'platform' variables directly
data$type[data$type == "SNV"] <- "SNV"
data$type[data$type == "indel"] <- "Indel"
data$platform[data$platform == "revio"] <- "PacBio Revio"
data$platform[data$platform == "promethion"] <- "ONT PromethION"
# Reorder the levels of `type` and `platform`
data$type <- factor(data$type, levels = c("SNV", "Indel")) # SNV on top
data$platform <- factor(data$platform, levels = c("PacBio Revio", "ONT PromethION")) # PacBio Revio on left
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, F1),
names_to = "metric",
values_to = "value")
# Standardize the names of `metric`
data_long$metric <- recode(data_long$metric,
recall = "Recall",
precision = "Precision",
F1 = "F1")
# Define a color-blind-friendly palette
cb_palette <- c("Recall" = "#D55E00", "Precision" = "#0072B2", "F1" = "#009E73")
# Map specific shapes to each metric
shape_mapping <- c("Recall" = 17, "Precision" = 15, "F1" = 16) # Triangle, square, and circle
# Plot the data
ggplot(data_long, aes(x = sample, y = value, shape = metric, color = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using reordered variables
scale_y_continuous(
breaks = function(y) {
ifelse(unique(data_long$type) == "Indel", c(0.85, 0.9, 0.95, 1.0), pretty(y))
}
) +
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric",
color = "Metric"
) +
scale_shape_manual(values = shape_mapping) +
scale_color_manual(values = cb_palette) + # Apply color-blind-friendly palette
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Plot the data
figure <- ggplot(data_long, aes(x = sample, y = value, shape = metric, color = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using reordered variables
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric",
color = "Metric"
) +
scale_shape_manual(values = shape_mapping) +
scale_color_manual(values = cb_palette) + # Apply color-blind-friendly palette
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
ggsave(filename = "concordance.pdf", plot = figure, width=169, units = "mm")
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(recall, precision, F1),
names_to = "metric",
values_to = "value")
# Standardize the names of `metric`
data_long$metric <- recode(data_long$metric,
recall = "Recall",
precision = "Precision",
F1 = "F1")  # Ensure consistent naming
# Define a color-blind-friendly palette
cb_palette <- c("Recall" = "#D55E00", "Precision" = "#0072B2", "F1" = "#009E73")
# Map specific shapes to each metric
shape_mapping <- c("Recall" = 17, "Precision" = 15, "F1" = 16) # Triangle, square, and circle
# Plot the data
figure <- ggplot(data_long, aes(x = sample, y = value, shape = metric, color = metric, group = metric)) +
geom_point(size = 3) +
facet_grid(type ~ platform, scales = "free_y") + # Facet using reordered variables
theme_bw() +
labs(
x = "Sample",
y = "Metric Value",
shape = "Metric",
color = "Metric"
) +
scale_shape_manual(values = shape_mapping) +
scale_color_manual(values = cb_palette) + # Apply color-blind-friendly palette
theme(
axis.text.x = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
figure
ggsave(filename = "concordance.pdf", plot = figure, width=169, units = "mm")
