# Install and load required packages
library(ggtree)
install.packages("ggtree")
# Install and load required packages
library(ggtree)
install.packages("ggtree")
R
which R
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(jtools)
install.packages("jtools")
library(ggplot2)
library(jtools)
library(sjPlot)
library(sjmisc)
library(knitr)
data = read.csv("d_k2p.csv")
knitr::kable(data, format="markdown")
fig1 <- ggplot(data, aes(x=mean_sco_k2p, y=mean_D)) +
geom_point(size = 3) +
labs(x="Phylogenetic Distance (K2P Means)", y = "Mean Patterson's D Statistic") +
theme_classic() +
theme(axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"), axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))
fig1
ggsave(filename = "/Users/matt/Desktop/d_k2p.svg", plot = fig1)
fig2 <- ggplot(data, aes(x=bindin_K2P, y=mean_D)) +
geom_point(size = 3) +
labs(x="Bindin Distance (K2P)", y = "Mean Patterson's D Statistic") +
theme_classic() +
scale_x_continuous(breaks = c(0.025, 0.050, 0.075)) +
theme(axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"), axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))
ggsave(filename = "/Users/matt/Desktop/d_bnd.svg", plot = fig2)
fig3 <- ggplot(data, aes(x=ebr1_K2P, y=mean_D)) +
geom_point(size = 3) +
labs(x="EBR1 Distance (K2P)", y = "Mean Patterson's D Statistic") +
theme_classic() +
theme(axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"), axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))
ggsave(filename = "/Users/matt/Desktop/d_ebr1.svg", plot = fig3)
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/bindin/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/bindin/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/bindin/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
library(rsconnect)
renv::snapshot()
library(rsconnect)
renv::snapshot()
rsconnect::deployApp('/Users/matt/Documents/GitHub/hla_coverage/scripts/shiny_app/', appName = "hla_coverage")
install.packages("devtools", dependencies = TRUE)
library(devtools)
library(devtools)
devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
#devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
library(COMICS)
launchApp()
install.packages("ICS")
library(devtools)
#devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
library(COMICS)
launchApp()
install.packages("moments")
library(devtools)
#devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
library(COMICS)
launchApp()
install.packages("‘ICSOutlier’")
install.packages("ICSOutlier")
library(devtools)
#devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
library(COMICS)
launchApp()
install.packages(c("shiny", "ggplot2", "tidyr", "bslib", "mvtnorm", "ICS", "moments", "ICSOutlier"), dependencies = TRUE)
install.packages(c("shiny", "ggplot2", "tidyr", "bslib", "mvtnorm", "ICS", "moments", "ICSOutlier"), dependencies = TRUE)
install.packages(c("shiny", "ggplot2", "tidyr", "bslib", "mvtnorm", "ICS", "moments", "ICSOutlier"), dependencies = TRUE)
install.packages(c("shiny", "ggplot2", "tidyr", "bslib", "mvtnorm", "ICS", "moments", "ICSOutlier"), dependencies = TRUE)
library(devtools)
#devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
library(COMICS)
launchApp()
install.packages("shinythemes")
library(devtools)
#devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
library(COMICS)
launchApp()
library(devtools)
#devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
library(COMICS)
launchApp()
library(devtools)
#devtools::install_github("JTNelsonWSU/COMICS", build_vignettes = FALSE)
library(COMICS)
launchApp()
remove.packages("COMICS")
install.packages(c("shiny", "ggplot2", "tidyr", "bslib", "mvtnorm", "ICS", "moments", "ICSOutlier"), dependencies = TRUE)
install.packages(c("shiny", "ggplot2", "tidyr", "bslib", "mvtnorm", "ICS", "moments", "ICSOutlier"), dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
devtools::install_github("oeco28/new_COMICS", build_vignettes = FALSE)
library(COMICS)
library(devtools)
library(COMICS)
run_comics()
library(ggplot2)
library(ggrepel)
library(dplyr)
# Create a simple data frame of steps and coordinates
workflow_steps <- data.frame(
step = c(
"Demultiplexing\n(Dorado / Lima)",
"Adapter Removal\n(Porechop_ABI / Lima)",
"Quality Trimming\n(Prowler)",
"Mapping to Reference\n(minimap2)",
"Quality Control\n(Retain Primary Alignments)\n(Exclude Duplicates)",
"Variant Calling\n(DeepVariant + pbsv + pbtrgt / Clair3 + Sniffles)",
"Phasing\n(HiPhase / LongPhase)",
"FASTA Generation\n(HLA Pipeline)"
),
x = 1:8,
y = rep(0, 8)
)
# Arrows: Create a separate data frame for segment coordinates
arrows <- data.frame(
x = 1:7,
xend = 2:8,
y = rep(0, 7),
yend = rep(0, 7)
)
# Make the plot
p <- ggplot() +
geom_text(data = workflow_steps, aes(x = x, y = y, label = step),
size = 4, fontface = "bold", lineheight = 0.9, vjust = -1) +
geom_segment(data = arrows, aes(x = x, xend = xend, y = y, yend = yend),
arrow = arrow(length = unit(0.25, "cm")), size = 0.8) +
xlim(0.5, 8.5) +
ylim(-0.5, 1.5) +
theme_void() +
theme(
plot.margin = margin(20, 20, 20, 20),
plot.title = element_text(hjust = 0.5, face = "bold", size = 16)
) +
ggtitle("HLA Haplotyping Workflow (ONT and PacBio)")
print(p)
library(tidyr)
library(ggplot2)
library(dplyr)
library(viridis)
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/phase_heat_map/")
# Load heatmap data
data <- read.csv("phase_map.hiphase.csv", header = TRUE, stringsAsFactors = FALSE)
#data <- read.csv("phase_map.whatshap.csv", header = TRUE, stringsAsFactors = FALSE)
#data <- read.csv("phase_map.longphase.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(data) <- gsub("\\.", "-", colnames(data))  # Replace dots with dashes
hprc_samples <- c("HG002", "HG01106", "HG01258", "HG01928", "HG02055", "HG02630", "HG03492", "HG03579", "NA19240", "NA20129", "NA21309")
class_I <- c("HLA-A", "HLA-B", "HLA-C")
# Convert samples and genes into factors to preserve order
sample_order <- rev(data$sample)  # Reverse sample order
gene_order <- colnames(data)[-1]  # Keep gene order
df_long <- pivot_longer(
data,
cols = -sample,
names_to = "Gene",
values_to = "Value"
)
df_long$sample <- factor(df_long$sample, levels = sample_order)
df_long$Gene <- factor(df_long$Gene, levels = gene_order)
# Load incomplete.csv and format labels
incomplete <- read.csv("incomplete.hiphase.csv", header = TRUE, stringsAsFactors = FALSE)
incomplete$label <- paste0(incomplete$num_haploblocks, " (", incomplete$largest_haploblock, ")")
# Merge `incomplete.csv` with `df_long` while preserving order
df_long <- df_long %>%
left_join(incomplete, by = c("sample", "Gene" = "gene")) %>%
mutate(label = ifelse(Value == 0, label, NA))  # Only label missing/0 tiles
# Ensure factor levels remain correct after merge
df_long$sample <- factor(df_long$sample, levels = sample_order)
df_long$Gene <- factor(df_long$Gene, levels = gene_order)
# Load haplotype annotation data
hap_data <- read.csv("edit_distance.csv", header = TRUE, stringsAsFactors = FALSE)
# Create a new label column in the format (hap1, hap2)
hap_data$hap_label <- paste0("(", hap_data$hap1, ", ", hap_data$hap2, ")")
# Merge with df_long (must match on both gene and sample)
df_long <- df_long %>%
left_join(hap_data, by = c("sample", "Gene" = "gene"))
# Preserve factor levels again after merge
df_long$sample <- factor(df_long$sample, levels = sample_order)
df_long$Gene <- factor(df_long$Gene, levels = gene_order)
# Plot heatmap
figure <- ggplot(df_long, aes(x = Gene, y = sample, fill = Value)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
geom_text(aes(label = label), size = 3, na.rm = TRUE) +
geom_text(aes(label = hap_label), color = "white", size = 2.9, fontface = "bold", na.rm = TRUE) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 7),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "none"
) +
labs(
x = "Gene",
y = "Sample"
)
print(figure)
# ======================== #
# Define HPRC samples and class I genes
hprc_samples <- c("HG002", "HG01106", "HG01258", "HG01928", "HG02055", "HG02630", "HG03492", "HG03579", "NA19240", "NA20129", "NA21309")
class_I <- c("HLA-A", "HLA-B", "HLA-C")
# Prepare data for Class I heatmap
df_classI <- df_long %>%
filter(sample %in% hprc_samples, Gene %in% class_I) %>%
mutate(
raw1 = hap1,
raw2 = hap2,
hap1 = ifelse(raw1 == "NA", 0, as.numeric(raw1)),
hap2 = ifelse(raw2 == "NA", 0, as.numeric(raw2)),
hap1 = ifelse(is.na(hap1) & !is.na(hap2), 0, hap1),
hap2 = ifelse(is.na(hap2) & !is.na(hap1), 0, hap2),
both_missing = is.na(raw1) & is.na(raw2),
mean_hap = ifelse(both_missing, NA, (hap1 + hap2) / 2),
hap_label = case_when(
is.na(raw1) & is.na(raw2) ~ NA_character_,
TRUE ~ paste0(
ifelse(is.na(raw1), "NA", raw1),
" | ",
ifelse(is.na(raw2), "NA", raw2)
)
),
text_color = ifelse(hap_label == "NA | NA" |
(sample == "NA19240" & Gene == "HLA-B" & mean_hap > 0.9),
"black", "white"))
# Plot heatmap
test1 <- ggplot(df_classI, aes(x = Gene, y = sample, fill = mean_hap)) +
geom_tile(color = "white") +
geom_text(aes(label = hap_label, color = text_color), size = 4, fontface = "bold", na.rm = TRUE) +
#scale_fill_gradient(low = "red", high = "white", na.value = "grey", name = "Mean Edit Distance") +
scale_fill_viridis_c(option = "D", direction = 1, na.value = "grey", name = "Mean Edit Distance") +
scale_color_identity() +
labs(
title = "Mean Edit Distance to HPRC HLA Haplotypes",
x = "Gene",
y = "Sample"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
)
print(test1)
ggsave(filename = "test1.png", plot = test1)
# ===================================== #
# Define HPRC samples and class I genes
hprc_samples <- c("HG002", "HG01106", "HG01258", "HG01928", "HG02055", "HG02630", "HG03492", "HG03579", "NA19240", "NA20129", "NA21309")
class_I <- c("HLA-A", "HLA-B", "HLA-C")
# Transform df_long into long format with hap1 and hap2 as separate rows
df_classI_long <- df_long %>%
filter(sample %in% hprc_samples, Gene %in% class_I) %>%
select(sample, Gene, hap1, hap2) %>%
mutate(
hap1 = ifelse(hap1 == "NA", NA, hap1),
hap2 = ifelse(hap2 == "NA", NA, hap2)
) %>%
pivot_longer(cols = c(hap1, hap2), names_to = "hap", values_to = "edit_distance") %>%
mutate(
edit_distance = as.numeric(edit_distance),
Gene_hap = paste0(Gene, "_", ifelse(hap == "hap1", "1", "2")),
label = ifelse(is.na(edit_distance), NA_character_, as.character(edit_distance)),
text_color = ifelse(is.na(edit_distance) | edit_distance > 500, "black", "white")
)
# Plot heatmap
test2 <- ggplot(df_classI_long, aes(x = Gene_hap, y = sample, fill = edit_distance)) +
geom_tile(color = "white") +
geom_text(aes(label = label, color = text_color), size = 4, fontface = "bold", na.rm = TRUE) +
#scale_fill_gradient(low = "red", high = "white", na.value = "grey", name = "Mean Edit\n Distance") +
scale_fill_viridis_c(option = "D", direction = 1, na.value = "grey", name = "Edit Distance") +
scale_color_identity() +
labs(
title = "Mean Edit Distance to HPRC HLA Haplotypes",
x = "Gene Haplotype",
y = "Sample"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
)
print(test2)
ggsave(filename = "test2.png", plot = test2, width = 10, height = 6)
# ==================================== #
# Define HPRC samples and class I genes
hprc_samples <- c("HG002", "HG01106", "HG01258", "HG01928", "HG02055", "HG02630", "HG03492", "HG03579", "NA19240", "NA20129", "NA21309")
class_I <- c("HLA-A", "HLA-B", "HLA-C")
# Make long format from df_long with edit distances and alignment lengths
df_classI_long <- df_long %>%
filter(sample %in% hprc_samples, Gene %in% class_I) %>%
select(sample, Gene, hap1, hap2, alignment_length_1, alignment_length_2) %>%
mutate(
hap1 = ifelse(hap1 == "NA", NA, hap1),
hap2 = ifelse(hap2 == "NA", NA, hap2),
alignment_length_1 = as.numeric(alignment_length_1),
alignment_length_2 = as.numeric(alignment_length_2)
) %>%
pivot_longer(
cols = c(hap1, hap2),
names_to = "hap",
values_to = "edit_distance"
) %>%
mutate(
alignment_length = ifelse(hap == "hap1", alignment_length_1, alignment_length_2),
edit_distance = as.numeric(edit_distance),
similarity_score = ifelse(!is.na(edit_distance) & !is.na(alignment_length),
1 - (edit_distance / alignment_length), NA),
Gene_hap = paste0(Gene, "_", ifelse(hap == "hap1", "1", "2")),
label = case_when(
is.na(similarity_score) ~ NA_character_,
similarity_score == 1 ~ "1",
TRUE ~ sprintf("%.3f", similarity_score)
),
text_color = ifelse(is.na(similarity_score) | similarity_score < 0.9, "black", "white")
)
# Plot
similarity_plot <- ggplot(df_classI_long, aes(x = Gene_hap, y = sample, fill = similarity_score)) +
geom_tile(color = "white") +
geom_text(aes(label = label, color = text_color), size = 4, fontface = "bold", na.rm = TRUE) +
#scale_fill_gradient(high = "red", low = "white", na.value = "grey", name = #"Percent\nSequence\nIdentity") +
scale_fill_viridis_c(option = "D", direction = -1, na.value = "grey", name = "Percent\nSequence\nIdentity") +
scale_color_identity() +
labs(
title = "Normalized Edit Distance to HPRC HLA Haplotypes",
x = "Gene Haplotype",
y = "Sample"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
)
print(similarity_plot)
ggsave(filename = "test3.png", plot = similarity_plot, width = 10, height = 6)
#######################
library(tidyr)
library(ggplot2)
library(dplyr)
# Load main heatmap data
data <- read.csv("phase_map.hiphase.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(data) <- gsub("\\.", "-", colnames(data))  # Replace dots with dashes
# Define HPRC samples and Class I genes
hprc_samples <- c("HG002", "HG01106", "HG01258", "HG01928", "HG02055", "HG02630", "HG03492", "HG03579", "NA19240", "NA20129", "NA21309")
class_I <- c("HLA-A", "HLA-B", "HLA-C")
# Convert samples and genes into factors to preserve order
sample_order <- rev(data$sample)
gene_order <- colnames(data)[-1]
# Reshape data
df_long <- pivot_longer(data, cols = -sample, names_to = "Gene", values_to = "Value")
df_long$sample <- factor(df_long$sample, levels = sample_order)
df_long$Gene <- factor(df_long$Gene, levels = gene_order)
# ✅ Load incomplete.csv FIRST
incomplete <- read.csv("incomplete.hiphase.csv", header = TRUE, stringsAsFactors = FALSE)
# Merge and calculate percent covered
df_long <- df_long %>%
left_join(incomplete, by = c("sample", "Gene" = "gene")) %>%
mutate(
largest_haploblock = as.numeric(gsub("%", "", largest_haploblock)),
percent_covered = ifelse(Value == 1, 100, largest_haploblock)
)
# Ensure order is still preserved after join
df_long$sample <- factor(df_long$sample, levels = sample_order)
df_long$Gene <- factor(df_long$Gene, levels = gene_order)
# Final plot — no annotations, just fill
test4 <- ggplot(df_long, aes(x = Gene, y = sample, fill = percent_covered)) +
geom_tile(color = "white") +
#scale_fill_gradient(low = "white", high = "red", na.value = "white",
#name = "Percent Gene\nCovered by\nLargest\nOverlapping/nHaploblock")
scale_fill_viridis_c(option = "D", direction = -1, na.value = "white",
name = "Percent Gene\nCovered by\nLargest\nOverlapping\nHaploblock")
theme_minimal() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 7),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
) +
labs(
x = "Gene",
y = "Sample"
)
print(test4)
library(tidyr)
library(ggplot2)
library(dplyr)
library(viridis)
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/phase_heat_map/")
# Load heatmap data
data <- read.csv("phase_map.hiphase.csv", header = TRUE, stringsAsFactors = FALSE)
#data <- read.csv("phase_map.whatshap.csv", header = TRUE, stringsAsFactors = FALSE)
#data <- read.csv("phase_map.longphase.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(data) <- gsub("\\.", "-", colnames(data))  # Replace dots with dashes
hprc_samples <- c("HG002", "HG01106", "HG01258", "HG01928", "HG02055", "HG02630", "HG03492", "HG03579", "NA19240", "NA20129", "NA21309")
class_I <- c("HLA-A", "HLA-B", "HLA-C")
# Convert samples and genes into factors to preserve order
sample_order <- rev(data$sample)  # Reverse sample order
gene_order <- colnames(data)[-1]  # Keep gene order
df_long <- pivot_longer(
data,
cols = -sample,
names_to = "Gene",
values_to = "Value"
)
df_long$sample <- factor(df_long$sample, levels = sample_order)
df_long$Gene <- factor(df_long$Gene, levels = gene_order)
# Load incomplete.csv and format labels
incomplete <- read.csv("incomplete.hiphase.csv", header = TRUE, stringsAsFactors = FALSE)
incomplete$label <- paste0(incomplete$num_haploblocks, " (", incomplete$largest_haploblock, ")")
# Merge `incomplete.csv` with `df_long` while preserving order
df_long <- df_long %>%
left_join(incomplete, by = c("sample", "Gene" = "gene")) %>%
mutate(label = ifelse(Value == 0, label, NA))  # Only label missing/0 tiles
# Ensure factor levels remain correct after merge
df_long$sample <- factor(df_long$sample, levels = sample_order)
df_long$Gene <- factor(df_long$Gene, levels = gene_order)
# Load haplotype annotation data
hap_data <- read.csv("edit_distance.csv", header = TRUE, stringsAsFactors = FALSE)
# Create a new label column in the format (hap1, hap2)
hap_data$hap_label <- paste0("(", hap_data$hap1, ", ", hap_data$hap2, ")")
# Merge with df_long (must match on both gene and sample)
df_long <- df_long %>%
left_join(hap_data, by = c("sample", "Gene" = "gene"))
# Preserve factor levels again after merge
df_long$sample <- factor(df_long$sample, levels = sample_order)
df_long$Gene <- factor(df_long$Gene, levels = gene_order)
# Plot heatmap
figure <- ggplot(df_long, aes(x = Gene, y = sample, fill = Value)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
geom_text(aes(label = label), size = 3, na.rm = TRUE) +
geom_text(aes(label = hap_label), color = "white", size = 2.9, fontface = "bold", na.rm = TRUE) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 7),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "none"
) +
labs(
x = "Gene",
y = "Sample"
)
print(figure)
