df_ebr1_gaps <- read.table("/Users/matt/Desktop/ebr1_missing.txt", header = TRUE, sep = "\t")
df_bindin_gaps <- read.table("/Users/matt/Desktop/bindin_missing.txt", header = TRUE, sep = "\t")
#df_ebr1_exons <- read.table("/Users/matt/Documents/GitHub/urchin_grp/raw_data/EBR1_PAML_Filtered_exon_coordinates_unit_codon.txt", header = TRUE, sep = "\t")
df_bindin_exons <- read.table("/Users/matt/Desktop/bindin_spur_3_exon_coords.txt", header = TRUE, sep = "\t")
# Convert Domain to factor with levels in the desired order
df_domains$Domain <- factor(df_domains$domain, levels = unique(df_domains$domain))
introgression_probabilities = fromJSON(file= "/Users/matt/Documents/GitHub/urchin_grp/phylonet_hmm/bindin.json")
coordinates <- as.numeric(readLines("/Users/matt/Desktop/bindin_coordinates.txt"))
all_coords <- introgression_df %>%
summarise(coordinates = list(seq(min(coordinates), max(coordinates)))) %>%
unnest(coordinates)
library(ggplot2)
library(cowplot)
library(rjson)
library(dplyr)
library(tidyr)
df_ebr1 <- read.csv('/Users/matt/Desktop/ebr1_converted_selected_sites.csv')
df_bindin <- read.csv('/Users/matt/Desktop/bindin_converted_selected_sites.csv')
df_domains <- read.table("/Users/matt/Documents/GitHub/urchin_grp/raw_data/ebr1_domains/ncbi_uniprot_domain_coordinates.txt", header = TRUE, sep = "\t")
df_ebr1_gaps <- read.table("/Users/matt/Desktop/ebr1_missing.txt", header = TRUE, sep = "\t")
df_bindin_gaps <- read.table("/Users/matt/Desktop/bindin_missing.txt", header = TRUE, sep = "\t")
#df_ebr1_exons <- read.table("/Users/matt/Documents/GitHub/urchin_grp/raw_data/EBR1_PAML_Filtered_exon_coordinates_unit_codon.txt", header = TRUE, sep = "\t")
df_bindin_exons <- read.table("/Users/matt/Desktop/bindin_spur_3_exon_coords.txt", header = TRUE, sep = "\t")
# Convert Domain to factor with levels in the desired order
df_domains$Domain <- factor(df_domains$domain, levels = unique(df_domains$domain))
introgression_probabilities = fromJSON(file= "/Users/matt/Documents/GitHub/urchin_grp/phylonet_hmm/bindin.json")
coordinates <- as.numeric(readLines("/Users/matt/Desktop/bindin_coordinates.txt"))
# Combine coordinates and introgression_probabilities into a data frame
introgression_df <- data.frame(coordinates = coordinates, introgression_probabilities = unlist(introgression_probabilities))
all_coords <- introgression_df %>%
summarise(coordinates = list(seq(min(coordinates), max(coordinates)))) %>%
unnest(coordinates)
result_df <- all_coords %>%
left_join(introgression_df, by = "coordinates")
ebr1 <- ggplot(df_ebr1) +
annotate("rect", xmin = 2072, xmax = 2341, ymin = -0.21, ymax = 1, fill = "darkred", alpha = 0.5) +
geom_tile(data = df_ebr1_gaps, aes(x = (start + stop) / 2, y = 0.3925, width = stop - start+1, height = 1.215), fill = "grey", alpha = 0.4) +
geom_point(data = df_ebr1, aes(x = site, y = method), color = df_ebr1$color, size = 2,shape=9) +
annotate("segment", x = 0, xend = 3712, y = 0.98, yend = 0.98, color = "black") +
geom_rect(data = df_domains, aes(xmin = start, xmax = stop, ymin = 0.96, ymax = 1.0, fill = Domain), color = "black", size = 0.2) +
#geom_rect(data = df_ebr1_exons, aes(xmin = start, xmax = stop, ymin = 0.9, ymax = 0.94), color = "black", size = 0.2, fill = "transparent") +
#geom_rect(data = df_gaps, aes(xmin = start, xmax = stop, ymin = -0.23, ymax = 1.02), color = "grey", size = 0.5, fill = "grey", alpha=0.2) +
#geom_text(data = df_ebr1_exons, aes(x = (start + stop) / 2, y = 0.92, label = exon), color = "black", size = 2, hjust = 0.5) +
scale_fill_viridis_d(breaks = levels(df_domains$Domain)) +
scale_y_continuous(breaks = c(-0.2, 0.2, 0.5, 0.8, 0.92), labels = c("FUBAR (-)", "PAML", "FUBAR (+)", "MEME", "Domain")) +
labs(title = "EBR1", x = "Amino Acid Site", y = "Selection Test") +
theme(
panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.y = element_text(size = 11, color = "black"),  # Increase size and make bold
axis.line = element_line(color = "black", linewidth = 0.5),
legend.position = "bottom",
legend.box = "horizontal",
axis.ticks.y = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
ebr1
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
ebr1 <- ggplot(df_ebr1) +
geom_vline(xintercept = 2072, color = "black") +
geom_vline(xintercept = 2341, color = "black") +
geom_tile(data = ebr1_result_df, aes(x = coordinates, y = 0.65, fill = introgression_probabilities), width = 1, height = 0.1) +
scale_fill_viridis_c(name = "Introgression Probabilities", na.value = "white", option = "plasma") +
geom_tile(data = df_ebr1_gaps, aes(x = (start + stop) / 2, y = 0.3925, width = stop - start+1, height = 1.215), fill = "grey", alpha = 0.4) +
new_scale_fill() +
geom_tile(data = df_plddt, aes(x = site, y = 0.0, fill = plddt), width = 1, height = 0.1) +
scale_fill_viridis_c(name = "plddt", na.value = "white", option = "plasma") +
geom_point(data = df_ebr1, aes(x = site, y = method), color = df_ebr1$color, size = 2,shape=9) +
annotate("segment", x = 0, xend = 3712, y = 0.98, yend = 0.98, color = "black") +
#scale_fill_viridis_c(name = "Introgression Probabilities", na.value = "grey") +
new_scale_fill() +
geom_rect(data = df_domains, aes(xmin = start, xmax = stop, ymin = 0.96, ymax = 1.0, fill = Domain), color = "black", size = 0.2) +
scale_fill_viridis_d(breaks = levels(df_domains$Domain)) +
geom_point(data = df_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
#geom_rect(data = df_ebr1_exons, aes(xmin = start, xmax = stop, ymin = 0.9, ymax = 0.94), color = "black", size = 0.2, fill = "transparent") +
#geom_rect(data = df_gaps, aes(xmin = start, xmax = stop, ymin = -0.23, ymax = 1.02), color = "grey", size = 0.5, fill = "grey", alpha=0.2) +
#geom_text(data = df_ebr1_exons, aes(x = (start + stop) / 2, y = 0.92, label = exon), color = "black", size = 2, hjust = 0.5) +
scale_y_continuous(breaks = c(-0.2, 0, 0.2, 0.35, 0.5, 0.65, 0.8, 0.92), labels = c("FUBAR (-)", "plddt", "PAML", "Interface", "FUBAR (+)", "Introgress", "MEME", "Domain")) +
labs(title = "EBR1", x = "Amino Acid Site", y = "Selection Test") +
theme(
panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.y = element_text(size = 11, color = "black"),  # Increase size and make bold
axis.line = element_line(color = "black", linewidth = 0.5),
legend.position = "bottom",
legend.box = "horizontal",
axis.ticks.y = element_blank(),  # Remove y-axis ticks
legend.title = element_text()
)
library(ggplot2)
library(cowplot)
library(rjson)
library(dplyr)
library(tidyr)
library(ggnewscale)
library(RColorBrewer)
df_ebr1 <- read.csv('/Users/matt/Desktop/ebr1_converted_selected_sites.csv')
df_bindin <- read.csv('/Users/matt/Desktop/bindin_converted_selected_sites.csv')
df_domains <- read.table("/Users/matt/Documents/GitHub/urchin_grp/raw_data/ebr1_domains/ncbi_uniprot_domain_coordinates.txt", header = TRUE, sep = "\t")
df_ebr1_gaps <- read.table("/Users/matt/Desktop/ebr1_missing.txt", header = TRUE, sep = "\t")
df_bindin_gaps <- read.table("/Users/matt/Desktop/bindin_missing.txt", header = TRUE, sep = "\t")
#df_ebr1_exons <- read.table("/Users/matt/Documents/GitHub/urchin_grp/raw_data/EBR1_PAML_Filtered_exon_coordinates_unit_codon.txt", header = TRUE, sep = "\t")
df_bindin_exons <- read.table("/Users/matt/Desktop/bindin_spur_3_exon_coords.txt", header = TRUE, sep = "\t")
# Convert Domain to factor with levels in the desired order
df_domains$Domain <- factor(df_domains$domain, levels = unique(df_domains$domain))
introgression_probabilities = fromJSON(file= "/Users/matt/Documents/GitHub/urchin_grp/phylonet_hmm/bindin.json")
coordinates <- as.numeric(readLines("/Users/matt/Desktop/bindin_coordinates.txt"))
# Combine coordinates and introgression_probabilities into a data frame
introgression_df <- data.frame(coordinates = coordinates, introgression_probabilities = unlist(introgression_probabilities))
all_coords <- introgression_df %>%
summarise(coordinates = list(seq(min(coordinates), max(coordinates)))) %>%
unnest(coordinates)
result_df <- all_coords %>%
left_join(introgression_df, by = "coordinates")
# For EBR1
ebr1_introgression_probabilities = fromJSON(file= "/Users/matt/Documents/GitHub/urchin_grp/phylonet_hmm/ebr1.json")
ebr1_coordinates <- as.numeric(readLines("/Users/matt/Desktop/ebr1_coordinates.txt"))
# Combine coordinates and introgression_probabilities into a data frame
ebr1_introgression_df <- data.frame(coordinates = ebr1_coordinates, introgression_probabilities = unlist(ebr1_introgression_probabilities))
ebr1_all_coords <- ebr1_introgression_df %>%
summarise(coordinates = list(seq(min(coordinates), max(coordinates)))) %>%
unnest(coordinates)
ebr1_result_df <- ebr1_all_coords %>%
left_join(ebr1_introgression_df, by = "coordinates")
new_rows <- data.frame(coordinates = 11131:11136,
introgression_probabilities = NA)
# Append the new rows to ebr1_result_df
ebr1_result_df <- bind_rows(ebr1_result_df, new_rows)
ebr1_result_df <- ebr1_result_df %>%
mutate(coordinates = (coordinates * (1/3)) - (1/6))
df_plddt <- read.csv('/Users/matt/Documents/GitHub/urchin_grp/scripts/ebr1_alphafold/plddt_values.csv')
df_interface <- read.csv('/Users/matt/Desktop/interface.csv')
ebr1 <- ggplot(df_ebr1) +
geom_vline(xintercept = 2072, color = "black") +
geom_vline(xintercept = 2341, color = "black") +
geom_tile(data = ebr1_result_df, aes(x = coordinates, y = 0.65, fill = introgression_probabilities), width = 1, height = 0.1) +
scale_fill_viridis_c(name = "Introgression Probabilities", na.value = "white", option = "plasma") +
geom_tile(data = df_ebr1_gaps, aes(x = (start + stop) / 2, y = 0.3925, width = stop - start+1, height = 1.215), fill = "grey", alpha = 0.4) +
new_scale_fill() +
geom_tile(data = df_plddt, aes(x = site, y = 0.0, fill = plddt), width = 1, height = 0.1) +
scale_fill_viridis_c(name = "plddt", na.value = "white", option = "plasma") +
geom_point(data = df_ebr1, aes(x = site, y = method), color = df_ebr1$color, size = 2,shape=9) +
annotate("segment", x = 0, xend = 3712, y = 0.98, yend = 0.98, color = "black") +
#scale_fill_viridis_c(name = "Introgression Probabilities", na.value = "grey") +
new_scale_fill() +
geom_rect(data = df_domains, aes(xmin = start, xmax = stop, ymin = 0.96, ymax = 1.0, fill = Domain), color = "black", size = 0.2) +
scale_fill_viridis_d(breaks = levels(df_domains$Domain)) +
geom_point(data = df_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
#geom_rect(data = df_ebr1_exons, aes(xmin = start, xmax = stop, ymin = 0.9, ymax = 0.94), color = "black", size = 0.2, fill = "transparent") +
#geom_rect(data = df_gaps, aes(xmin = start, xmax = stop, ymin = -0.23, ymax = 1.02), color = "grey", size = 0.5, fill = "grey", alpha=0.2) +
#geom_text(data = df_ebr1_exons, aes(x = (start + stop) / 2, y = 0.92, label = exon), color = "black", size = 2, hjust = 0.5) +
scale_y_continuous(breaks = c(-0.2, 0, 0.2, 0.35, 0.5, 0.65, 0.8, 0.92), labels = c("FUBAR (-)", "plddt", "PAML", "Interface", "FUBAR (+)", "Introgress", "MEME", "Domain")) +
labs(title = "EBR1", x = "Amino Acid Site", y = "Selection Test") +
theme(
panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.y = element_text(size = 11, color = "black"),  # Increase size and make bold
axis.line = element_line(color = "black", linewidth = 0.5),
legend.position = "bottom",
legend.box = "horizontal",
axis.ticks.y = element_blank(),  # Remove y-axis ticks
legend.title = element_text()
)
ebr1
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
View(df_bindin)
bindin_interface <- read.csv("/Users/matt/Desktop/bindin_interface.csv")
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = df_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
View(bindin_interface)
bindin_interface <- read.csv("/Users/matt/Desktop/bindin_interface.csv")
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = df_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
View(bindin_interface)
View(df_bindin)
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = bindin_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
ebr1
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = bindin_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
# Install and load required packages
library(ggtree)
install.packages("ggtree")
# Install and load required packages
library(ggtree)
install.packages("ggtree")
R
which R
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(jtools)
install.packages("jtools")
library(ggplot2)
library(jtools)
library(sjPlot)
library(sjmisc)
library(knitr)
data = read.csv("d_k2p.csv")
knitr::kable(data, format="markdown")
fig1 <- ggplot(data, aes(x=mean_sco_k2p, y=mean_D)) +
geom_point(size = 3) +
labs(x="Phylogenetic Distance (K2P Means)", y = "Mean Patterson's D Statistic") +
theme_classic() +
theme(axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"), axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))
fig1
ggsave(filename = "/Users/matt/Desktop/d_k2p.svg", plot = fig1)
fig2 <- ggplot(data, aes(x=bindin_K2P, y=mean_D)) +
geom_point(size = 3) +
labs(x="Bindin Distance (K2P)", y = "Mean Patterson's D Statistic") +
theme_classic() +
scale_x_continuous(breaks = c(0.025, 0.050, 0.075)) +
theme(axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"), axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))
ggsave(filename = "/Users/matt/Desktop/d_bnd.svg", plot = fig2)
fig3 <- ggplot(data, aes(x=ebr1_K2P, y=mean_D)) +
geom_point(size = 3) +
labs(x="EBR1 Distance (K2P)", y = "Mean Patterson's D Statistic") +
theme_classic() +
theme(axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"), axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))
ggsave(filename = "/Users/matt/Desktop/d_ebr1.svg", plot = fig3)
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/bindin/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/bindin/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/bindin/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
library(rsconnect)
renv::snapshot()
library(rsconnect)
renv::snapshot()
rsconnect::deployApp('/Users/matt/Documents/GitHub/hla_coverage/scripts/shiny_app/', appName = "hla_coverage")
library(tidyr)
library(ggplot2)
library(dplyr)
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/phase_heat_map/")
# Load heatmap data
#data <- read.csv("phase_map_hiphase.csv", header = TRUE, stringsAsFactors = FALSE)
data <- read.csv("whatshap_phase_map.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(data) <- gsub("\\.", "-", colnames(data))  # Replace dots with dashes
# Convert samples and genes into factors to preserve order
sample_order <- rev(data$sample)  # Reverse sample order
gene_order <- colnames(data)[-1]  # Keep gene order
df_long <- pivot_longer(
data,
cols = -sample,
names_to = "Gene",
values_to = "Value"
)
df_long$sample <- factor(df_long$sample, levels = sample_order)
df_long$Gene <- factor(df_long$Gene, levels = gene_order)
# Load incomplete.csv and format labels
#incomplete <- read.csv("incomplete.csv", header = TRUE, stringsAsFactors = FALSE)
#incomplete$label <- paste0(incomplete$num_haploblocks, " (", incomplete$prop_phased, ")")
# Merge `incomplete.csv` with `df_long` while preserving order
#df_long <- df_long %>%
#left_join(incomplete, by = c("sample", "Gene" = "gene")) %>%
#mutate(label = ifelse(Value == 0, label, NA))  # Only label missing/0 tiles
# Ensure factor levels remain correct after merge
df_long$sample <- factor(df_long$sample, levels = sample_order)
df_long$Gene <- factor(df_long$Gene, levels = gene_order)
# Plot heatmap
figure <- ggplot(df_long, aes(x = Gene, y = sample, fill = Value)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
#geom_text(aes(label = label), size = 3, na.rm = TRUE) +  # Add text only to missing/0 tiles
theme_minimal() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 7),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "none"
) +
labs(
x = "Gene",
y = "Sample"
)
print(figure)
# Save the figure
ggsave(filename = "hiphase_heat_map.pdf", plot = figure)
ggsave(filename = "hiphase_heat_map.png", plot = figure)
