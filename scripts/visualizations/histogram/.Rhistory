x = "Histogram Bin",
y = "Mean Count for Bin"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, hjust = 0.5),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
# Display the plot
figure
# Save the figure
ggsave(filename = "histogram_bar_plot.png", plot = figure, width = 169, units = "mm")
# Load required libraries
library(ggplot2)
library(dplyr)
# Define maximum value for capping
max_value <- 400
# Step 1: Read and Prepare Data
data <- read.table("pacbio_genes.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Extract only the sample columns (excluding gene_name)
sample_data <- data[, -1]
# Cap all values larger than max_value
sample_data[sample_data > max_value] <- max_value
# Step 2: Calculate Number of Bins
# Use Sturges' rule based on the number of observations in a single sample
num_bins <- ceiling(log2(length(sample_data[[1]])) + 1)
# Step 3: Define Breaks
# Create breaks for the histogram using the capped range [0, max_value]
breaks <- seq(0, max_value, length.out = num_bins + 1)
# Step 4: Calculate Histogram Counts for Each Sample
# Function to compute histogram counts
calculate_histogram <- function(column, breaks) {
hist(column, breaks = breaks, plot = FALSE)$counts
}
# Apply the histogram function to each column of the sample data
hist_counts <- apply(sample_data, 2, calculate_histogram, breaks = breaks)
# Step 5: Calculate Mean Counts and Error
mean_counts <- rowMeans(hist_counts, na.rm = TRUE)
sd_counts <- apply(hist_counts, 1, sd, na.rm = TRUE)
n_samples_per_bin <- rowSums(!is.na(hist_counts))
sem_counts <- sd_counts / sqrt(n_samples_per_bin)
# Ensure no negative lower bounds for error bars
ymin <- pmax(mean_counts - sem_counts, 0)
ymax <- mean_counts + sem_counts
# Step 6: Create Bin Labels
bin_labels <- paste0(
as.integer(head(breaks, -1)), "-", as.integer(tail(breaks, -1) - 1)
)
# Correct the last bin label to ">last_bin_start"
bin_labels[length(bin_labels)] <- paste0(">", as.integer(breaks[length(breaks) - 1]))
# Create a data frame for plotting
plot_data <- data.frame(
BinLabel = factor(bin_labels, levels = bin_labels), # Ensure levels are ordered
MeanCount = mean_counts,
SEM = sem_counts
)
# Step 7: Generate the Plot
figure <- ggplot(plot_data, aes(x = BinLabel, y = MeanCount)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, color = "black") +
labs(
title = "Mean Coverage Depth Distribution for Targeted Genes",
x = "Histogram Bin",
y = "Mean Count for Bin"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, hjust = 0.5),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
# Display the plot
figure
# Load required library
library(ggplot2)
# Set the working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/histogram/")
# Read the data without setting row.names
data <- read.table("pacbio_classIII.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Convert the data to a long format
long_data <- as.numeric(unlist(data[, -1])) # Skip the first column if it contains non-numerical data
View(data)
# Load required library
library(ggplot2)
# Set the working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/histogram/")
# Read the data without setting row.names
data <- read.table("pacbio_classIII.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Convert the data to a long format
long_data <- as.numeric(unlist(data[, -1])) # Skip the first column if it contains non-numerical data
# Remove non-finite values
long_data <- long_data[is.finite(long_data)]
# Load required library
library(ggplot2)
# Set the working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/histogram/")
# Read the data without setting row.names
data <- read.table("pacbio_classIII.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Convert the data to a long format
long_data <- as.numeric(unlist(data[, -1])) # Skip the first column if it contains non-numerical data
View(data)
# Check line lengths in the file
lines <- readLines("pacbio_classIII.txt")
lengths <- sapply(strsplit(lines, "\t"), length)
print(lengths)
View(data)
# Load required library
library(ggplot2)
# Set the working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/histogram/")
# Read the data without setting row.names
data <- read.table("pacbio_classIII.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Check line lengths in the file
lines <- readLines("pacbio_classIII.txt")
lengths <- sapply(strsplit(lines, "\t"), length)
print(lengths)
# Load required library
library(ggplot2)
# Set the working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/histogram/")
# Read the data without setting row.names
data <- read.table("pacbio_classIII.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
View(data)
# Load required library
library(ggplot2)
# Set the working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/histogram/")
# Read the data without setting row.names
data <- read.table("pacbio_classIII.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Load required library
library(ggplot2)
# Set the working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/histogram/")
# Read the data without setting row.names
data <- read.table("pacbio_classIII.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Convert the data to a long format
long_data <- as.numeric(unlist(data[, -1])) # Skip the first column if it contains non-numerical data
# Remove non-finite values
long_data <- long_data[is.finite(long_data)]
# Create a data frame for ggplot2
plot_data <- data.frame(values = long_data)
# Count how many values fall in the first bin (0 <= x < 30)
first_bin_count <- sum(plot_data$values >= 0 & plot_data$values < 30)
# Create a histogram with enhancements
figure <- ggplot(plot_data, aes(x = values)) +
geom_histogram(binwidth = 30, fill = "skyblue", color = "black", boundary = 0) +
labs(x = "Mean Gene-Wide Coverage Depth\nTargeted Class III Genes, All Samples", y = "Frequency") +
theme_minimal() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
) +
# Add a vertical red dotted line at x = 30
geom_vline(xintercept = 30, linetype = "dashed", color = "red", size = 1) +
# Add a label for the first bin
annotate(
"text",
x = 15,                     # Center of the first bin (0 to 30)
y = first_bin_count + 10,   # Slightly above the bin height
label = paste(first_bin_count),
color = "black",
size = 5
) +
# Add a label for the vertical line
annotate(
"text",
x = 32,                      # Slightly to the right of the line for visibility
y = 245,
label = "X = 30",
hjust = 0,                   # Left-align the text
color = "red",
size = 4
)
figure
ggsave(filename = "histogram.png", plot = figure, width=169, units = "mm")
ggsave(filename = "histogram.pdf", plot = figure, width=169, units = "mm")
# Load required library
library(ggplot2)
# Set the working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/histogram/")
# Read the data without setting row.names
data <- read.table("pacbio_classIII.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Convert the data to a long format
long_data <- as.numeric(unlist(data[, -1])) # Skip the first column if it contains non-numerical data
# Remove non-finite values
long_data <- long_data[is.finite(long_data)]
# Create a data frame for ggplot2
plot_data <- data.frame(values = long_data)
# Count how many values fall in the first bin (0 <= x < 30)
first_bin_count <- sum(plot_data$values >= 0 & plot_data$values < 30)
# Create a histogram with enhancements
figure <- ggplot(plot_data, aes(x = values)) +
geom_histogram(binwidth = 30, fill = "skyblue", color = "black", boundary = 0) +
labs(x = "Mean Gene-Wide Coverage Depth\nTargeted Class III Genes, All Samples", y = "Frequency") +
theme_minimal() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
) +
# Add a vertical red dotted line at x = 30
geom_vline(xintercept = 30, linetype = "dashed", color = "red", size = 1) +
# Add a label for the first bin
annotate(
"text",
x = 15,                     # Center of the first bin (0 to 30)
y = first_bin_count + 30,   # Slightly above the bin height
label = paste(first_bin_count),
color = "black",
size = 5
) +
# Add a label for the vertical line
annotate(
"text",
x = 32,                      # Slightly to the right of the line for visibility
y = 450,
label = "X = 30",
hjust = 0,                   # Left-align the text
color = "red",
size = 4
)
figure
ggsave(filename = "histogram.png", plot = figure, width=169, units = "mm")
ggsave(filename = "histogram.pdf", plot = figure, width=169, units = "mm")
# Load required library
library(ggplot2)
# Set the working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/histogram/")
# Read the data without setting row.names
data <- read.table("pacbio_classIII.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Convert the data to a long format
long_data <- as.numeric(unlist(data[, -1])) # Skip the first column if it contains non-numerical data
# Remove non-finite values
long_data <- long_data[is.finite(long_data)]
# Create a data frame for ggplot2
plot_data <- data.frame(values = long_data)
# Count how many values fall in the first bin (0 <= x < 30)
first_bin_count <- sum(plot_data$values >= 0 & plot_data$values < 30)
# Create a histogram with enhancements
figure <- ggplot(plot_data, aes(x = values)) +
geom_histogram(binwidth = 30, fill = "skyblue", color = "black", boundary = 0) +
labs(x = "Mean Gene-Wide Coverage Depth\nTargeted Class III Genes, All Samples", y = "Frequency") +
theme_minimal() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
) +
# Add a vertical red dotted line at x = 30
geom_vline(xintercept = 30, linetype = "dashed", color = "red", size = 1) +
# Add a label for the first bin
annotate(
"text",
x = 15,                     # Center of the first bin (0 to 30)
y = first_bin_count + 30,   # Slightly above the bin height
label = paste(first_bin_count),
color = "black",
size = 5
) +
# Add a label for the vertical line
annotate(
"text",
x = 32,                      # Slightly to the right of the line for visibility
y = 450,
label = "X = 30",
hjust = 0,                   # Left-align the text
color = "red",
size = 3
)
figure
ggsave(filename = "histogram.png", plot = figure, width=169, units = "mm")
ggsave(filename = "histogram.pdf", plot = figure, width=169, units = "mm")
# Load required library
library(ggplot2)
# Set the working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/histogram/")
# Read the data without setting row.names
data <- read.table("pacbio_classIII.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Convert the data to a long format
long_data <- as.numeric(unlist(data[, -1])) # Skip the first column if it contains non-numerical data
# Remove non-finite values
long_data <- long_data[is.finite(long_data)]
# Create a data frame for ggplot2
plot_data <- data.frame(values = long_data)
# Count how many values fall in the first bin (0 <= x < 30)
first_bin_count <- sum(plot_data$values >= 0 & plot_data$values < 30)
# Create a histogram with enhancements
figure <- ggplot(plot_data, aes(x = values)) +
geom_histogram(binwidth = 30, fill = "skyblue", color = "black", boundary = 0) +
labs(x = "Mean Gene-Wide Coverage Depth\nTargeted Class III Genes, All Samples", y = "Frequency") +
theme_minimal() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
) +
# Add a vertical red dotted line at x = 30
geom_vline(xintercept = 30, linetype = "dashed", color = "red", size = 1) +
# Add a label for the first bin
annotate(
"text",
x = 15,                     # Center of the first bin (0 to 30)
y = first_bin_count + 20,   # Slightly above the bin height
label = paste(first_bin_count),
color = "black",
size = 5
) +
# Add a label for the vertical line
annotate(
"text",
x = 32,                      # Slightly to the right of the line for visibility
y = 450,
label = "X = 30",
hjust = 0,                   # Left-align the text
color = "red",
size = 3
)
figure
ggsave(filename = "histogram.png", plot = figure, width=169, units = "mm")
ggsave(filename = "histogram.pdf", plot = figure, width=169, units = "mm")
# Load ggplot2 library
library(ggplot2)
# Define the values
values <- c(125, 108, 104, 100, 73, 113, 136, 86, 107, 91, 98, 102, 74, 85, 100, 84, 94, 104, 122, 111, 98, 88, 109, 92, 97, 96, 126, 112, 134, 108, 81, 86, 137, 90, 88, 54, 111, 132, 134, 88, 101, 106, 74, 56, 92, 125, 104, 133, 125, 83, 47, 46, 163, 119, 87, 64, 61, 60, 75, 95, 122, 122, 127, 127, 132, 94, 107, 91, 113)
# Create a data frame for ggplot2
data <- data.frame(values = values)
# Plot the histogram
figure <- ggplot(data, aes(x = values)) +
geom_histogram(breaks = seq(0, max(values) + 30, by = 30), # Define exact breaks
fill = "skyblue", color = "black") +
labs(x = "Mean Gene-Wide Coverage Depth\nTargeted Class III Genes\nAveraged Across Samples", y = "Frequency") +
theme_minimal() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
) +
geom_vline(xintercept = 60, linetype = "dashed", color = "red", size = 1) +
annotate(
"text",
x = 62,                      # Slightly to the right of the line for visibility
y = 15,
label = "X = 60",
hjust = 0,                   # Left-align the text
color = "red",
size = 4
)
figure
# Load ggplot2 library
library(ggplot2)
# Define the values
values <- c(125, 108, 104, 100, 73, 113, 136, 86, 107, 91, 98, 102, 74, 85, 100, 84, 94, 104, 122, 111, 98, 88, 109, 92, 97, 96, 126, 112, 134, 108, 81, 86, 137, 90, 88, 54, 111, 132, 134, 88, 101, 106, 74, 56, 92, 125, 104, 133, 125, 83, 47, 46, 163, 119, 87, 64, 61, 60, 75, 95, 122, 122, 127, 127, 132, 94, 107, 91, 113)
# Create a data frame for ggplot2
data <- data.frame(values = values)
# Plot the histogram
figure <- ggplot(data, aes(x = values)) +
geom_histogram(breaks = seq(0, max(values) + 20, by = 20), # Define exact breaks
fill = "skyblue", color = "black") +
labs(x = "Mean Gene-Wide Coverage Depth\nTargeted Class III Genes\nAveraged Across Samples", y = "Frequency") +
theme_minimal() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
) +
geom_vline(xintercept = 60, linetype = "dashed", color = "red", size = 1) +
annotate(
"text",
x = 62,                      # Slightly to the right of the line for visibility
y = 15,
label = "X = 60",
hjust = 0,                   # Left-align the text
color = "red",
size = 4
)
figure
min(values)
# Load ggplot2 library
library(ggplot2)
# Define the values
values <- c(125, 108, 104, 100, 73, 113, 136, 86, 107, 91, 98, 102, 74, 85, 100, 84, 94, 104, 122, 111, 98, 88, 109, 92, 97, 96, 126, 112, 134, 108, 81, 86, 137, 90, 88, 54, 111, 132, 134, 88, 101, 106, 74, 56, 92, 125, 104, 133, 125, 83, 47, 46, 163, 119, 87, 64, 61, 60, 75, 95, 122, 122, 127, 127, 132, 94, 107, 91, 113)
# Create a data frame for ggplot2
data <- data.frame(values = values)
# Plot the histogram
figure <- ggplot(data, aes(x = values)) +
geom_histogram(breaks = seq(0, max(values) + 20, by = 20), # Define exact breaks
fill = "skyblue", color = "black") +
labs(x = "Mean Gene-Wide Coverage Depth\nTargeted Class III Genes\nAveraged Across Samples", y = "Frequency") +
theme_minimal() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
) +
geom_vline(xintercept = 40, linetype = "dashed", color = "red", size = 1) +
annotate(
"text",
x = 62,                      # Slightly to the right of the line for visibility
y = 15,
label = "X = 60",
hjust = 0,                   # Left-align the text
color = "red",
size = 4
)
figure
# Load ggplot2 library
library(ggplot2)
# Define the values
values <- c(125, 108, 104, 100, 73, 113, 136, 86, 107, 91, 98, 102, 74, 85, 100, 84, 94, 104, 122, 111, 98, 88, 109, 92, 97, 96, 126, 112, 134, 108, 81, 86, 137, 90, 88, 54, 111, 132, 134, 88, 101, 106, 74, 56, 92, 125, 104, 133, 125, 83, 47, 46, 163, 119, 87, 64, 61, 60, 75, 95, 122, 122, 127, 127, 132, 94, 107, 91, 113)
# Create a data frame for ggplot2
data <- data.frame(values = values)
# Plot the histogram
figure <- ggplot(data, aes(x = values)) +
geom_histogram(breaks = seq(0, max(values) + 20, by = 20), # Define exact breaks
fill = "skyblue", color = "black") +
labs(x = "Mean Gene-Wide Coverage Depth\nTargeted Class III Genes\nAveraged Across Samples", y = "Frequency") +
theme_minimal() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
) +
geom_vline(xintercept = 40, linetype = "dashed", color = "red", size = 1) +
annotate(
"text",
x = 42,                      # Slightly to the right of the line for visibility
y = 15,
label = "X = 40",
hjust = 0,                   # Left-align the text
color = "red",
size = 4
)
figure
ggsave(filename = "histogram2.pdf", plot = figure, width=169, units = "mm")
ggsave(filename = "histogram2.png", plot = figure, width=169, units = "mm")
# Load required libraries
library(ggplot2)
library(dplyr)
# Define maximum value for capping
max_value <- 400
# Step 1: Read and Prepare Data
data <- read.table("pacbio_genes.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Extract only the sample columns (excluding gene_name)
sample_data <- data[, -1]
View(sample_data)
# Load required libraries
library(ggplot2)
library(dplyr)
# Define maximum value for capping
max_value <- 400
# Step 1: Read and Prepare Data
data <- read.table("pacbio_genes.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Extract only the sample columns (excluding gene_name)
sample_data <- data[, -1]
# Cap all values larger than max_value
sample_data[sample_data > max_value] <- max_value
# Step 2: Calculate Number of Bins
# Use Sturges' rule based on the number of observations in a single sample
num_bins <- ceiling(log2(length(sample_data[[1]])) + 1)
# Step 3: Define Breaks
# Create breaks for the histogram using the capped range [0, max_value]
breaks <- seq(0, max_value, length.out = num_bins + 1)
# Step 4: Calculate Histogram Counts for Each Sample
# Function to compute histogram counts
calculate_histogram <- function(column, breaks) {
hist(column, breaks = breaks, plot = FALSE)$counts
}
# Apply the histogram function to each column of the sample data
hist_counts <- apply(sample_data, 2, calculate_histogram, breaks = breaks)
# Step 5: Calculate Mean Counts and Error
mean_counts <- rowMeans(hist_counts, na.rm = TRUE)
sd_counts <- apply(hist_counts, 1, sd, na.rm = TRUE)
n_samples_per_bin <- rowSums(!is.na(hist_counts))
sem_counts <- sd_counts / sqrt(n_samples_per_bin)
# Ensure no negative lower bounds for error bars
ymin <- pmax(mean_counts - sem_counts, 0)
ymax <- mean_counts + sem_counts
# Step 6: Create Bin Labels
bin_labels <- paste0(
as.integer(head(breaks, -1)), "-", as.integer(tail(breaks, -1) - 1)
)
# Correct the last bin label to ">last_bin_start"
bin_labels[length(bin_labels)] <- paste0(">", as.integer(breaks[length(breaks) - 1]))
# Create a data frame for plotting
plot_data <- data.frame(
BinLabel = factor(bin_labels, levels = bin_labels), # Ensure levels are ordered
MeanCount = mean_counts,
SEM = sem_counts
)
# Step 7: Generate the Plot
figure <- ggplot(plot_data, aes(x = BinLabel, y = MeanCount)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, color = "black") +
labs(
title = "Mean Coverage Depth Distribution for Targeted Genes",
x = "Histogram Bin",
y = "Mean Count for Bin"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, hjust = 0.5),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
# Display the plot
figure
# Save the figure
ggsave(filename = "histogram_bar_plot.png", plot = figure, width = 169, units = "mm")
ggsave(filename = "histogram_bar_plot.pdf", plot = figure, width = 169, units = "mm")
