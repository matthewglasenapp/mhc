theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 7),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "none"
) +
labs(
x = "Gene",
y = "Sample"
)
print(figure)
# ======================== #
# Define HPRC samples and class I genes
hprc_samples <- c("HG002", "HG01106", "HG01258", "HG01928", "HG02055", "HG02630", "HG03492", "HG03579", "NA19240", "NA20129", "NA21309")
class_I <- c("HLA-A", "HLA-B", "HLA-C")
# Prepare data for Class I heatmap
df_classI <- df_long %>%
filter(sample %in% hprc_samples, Gene %in% class_I) %>%
mutate(
raw1 = hap1,
raw2 = hap2,
hap1 = ifelse(raw1 == "NA", 0, as.numeric(raw1)),
hap2 = ifelse(raw2 == "NA", 0, as.numeric(raw2)),
hap1 = ifelse(is.na(hap1) & !is.na(hap2), 0, hap1),
hap2 = ifelse(is.na(hap2) & !is.na(hap1), 0, hap2),
both_missing = is.na(raw1) & is.na(raw2),
mean_hap = ifelse(both_missing, NA, (hap1 + hap2) / 2),
hap_label = case_when(
is.na(raw1) & is.na(raw2) ~ NA_character_,
TRUE ~ paste0(
ifelse(is.na(raw1), "NA", raw1),
" | ",
ifelse(is.na(raw2), "NA", raw2)
)
),
text_color = ifelse(hap_label == "NA | NA" |
(sample == "NA19240" & Gene == "HLA-B" & mean_hap > 0.9),
"black", "white"))
# Plot heatmap
test1 <- ggplot(df_classI, aes(x = Gene, y = sample, fill = mean_hap)) +
geom_tile(color = "white") +
geom_text(aes(label = hap_label, color = text_color), size = 4, fontface = "bold", na.rm = TRUE) +
#scale_fill_gradient(low = "red", high = "white", na.value = "grey", name = "Mean Edit Distance") +
scale_fill_viridis_c(option = "D", direction = 1, na.value = "grey", name = "Mean Edit Distance") +
scale_color_identity() +
labs(
title = "Mean Edit Distance to HPRC HLA Haplotypes",
x = "Gene",
y = "Sample"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
)
print(test1)
ggsave(filename = "test1.png", plot = test1)
# ===================================== #
# Define HPRC samples and class I genes
hprc_samples <- c("HG002", "HG01106", "HG01258", "HG01928", "HG02055", "HG02630", "HG03492", "HG03579", "NA19240", "NA20129", "NA21309")
class_I <- c("HLA-A", "HLA-B", "HLA-C")
# Transform df_long into long format with hap1 and hap2 as separate rows
df_classI_long <- df_long %>%
filter(sample %in% hprc_samples, Gene %in% class_I) %>%
select(sample, Gene, hap1, hap2) %>%
mutate(
hap1 = ifelse(hap1 == "NA", NA, hap1),
hap2 = ifelse(hap2 == "NA", NA, hap2)
) %>%
pivot_longer(cols = c(hap1, hap2), names_to = "hap", values_to = "edit_distance") %>%
mutate(
edit_distance = as.numeric(edit_distance),
Gene_hap = paste0(Gene, "_", ifelse(hap == "hap1", "1", "2")),
label = ifelse(is.na(edit_distance), NA_character_, as.character(edit_distance)),
text_color = ifelse(is.na(edit_distance) | edit_distance > 500, "black", "white")
)
# Plot heatmap
test2 <- ggplot(df_classI_long, aes(x = Gene_hap, y = sample, fill = edit_distance)) +
geom_tile(color = "white") +
geom_text(aes(label = label, color = text_color), size = 4, fontface = "bold", na.rm = TRUE) +
#scale_fill_gradient(low = "red", high = "white", na.value = "grey", name = "Mean Edit\n Distance") +
scale_fill_viridis_c(option = "D", direction = 1, na.value = "grey", name = "Edit Distance") +
scale_color_identity() +
labs(
title = "Mean Edit Distance to HPRC HLA Haplotypes",
x = "Gene Haplotype",
y = "Sample"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
)
print(test2)
ggsave(filename = "test2.png", plot = test2, width = 10, height = 6)
# ==================================== #
# Define HPRC samples and class I genes
hprc_samples <- c("HG002", "HG01106", "HG01258", "HG01928", "HG02055", "HG02630", "HG03492", "HG03579", "NA19240", "NA20129", "NA21309")
class_I <- c("HLA-A", "HLA-B", "HLA-C")
# Make long format from df_long with edit distances and alignment lengths
df_classI_long <- df_long %>%
filter(sample %in% hprc_samples, Gene %in% class_I) %>%
select(sample, Gene, hap1, hap2, alignment_length_1, alignment_length_2) %>%
mutate(
hap1 = ifelse(hap1 == "NA", NA, hap1),
hap2 = ifelse(hap2 == "NA", NA, hap2),
alignment_length_1 = as.numeric(alignment_length_1),
alignment_length_2 = as.numeric(alignment_length_2)
) %>%
pivot_longer(
cols = c(hap1, hap2),
names_to = "hap",
values_to = "edit_distance"
) %>%
mutate(
alignment_length = ifelse(hap == "hap1", alignment_length_1, alignment_length_2),
edit_distance = as.numeric(edit_distance),
similarity_score = ifelse(!is.na(edit_distance) & !is.na(alignment_length),
1 - (edit_distance / alignment_length), NA),
Gene_hap = paste0(Gene, "_", ifelse(hap == "hap1", "1", "2")),
label = case_when(
is.na(similarity_score) ~ NA_character_,
similarity_score == 1 ~ "1",
TRUE ~ sprintf("%.3f", similarity_score)
),
text_color = ifelse(is.na(similarity_score) | similarity_score < 0.9, "black", "white")
)
# Plot
similarity_plot <- ggplot(df_classI_long, aes(x = Gene_hap, y = sample, fill = similarity_score)) +
geom_tile(color = "white") +
geom_text(aes(label = label, color = text_color), size = 4, fontface = "bold", na.rm = TRUE) +
#scale_fill_gradient(high = "red", low = "white", na.value = "grey", name = #"Percent\nSequence\nIdentity") +
scale_fill_viridis_c(option = "D", direction = -1, na.value = "grey", name = "Percent\nSequence\nIdentity") +
scale_color_identity() +
labs(
title = "Normalized Edit Distance to HPRC HLA Haplotypes",
x = "Gene Haplotype",
y = "Sample"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
)
print(similarity_plot)
ggsave(filename = "test3.png", plot = similarity_plot, width = 10, height = 6)
#######################
library(tidyr)
library(ggplot2)
library(dplyr)
# Load main heatmap data
data <- read.csv("phase_map.hiphase.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(data) <- gsub("\\.", "-", colnames(data))  # Replace dots with dashes
# Define HPRC samples and Class I genes
hprc_samples <- c("HG002", "HG01106", "HG01258", "HG01928", "HG02055", "HG02630", "HG03492", "HG03579", "NA19240", "NA20129", "NA21309")
class_I <- c("HLA-A", "HLA-B", "HLA-C")
# Convert samples and genes into factors to preserve order
sample_order <- rev(data$sample)
gene_order <- colnames(data)[-1]
# Reshape data
df_long <- pivot_longer(data, cols = -sample, names_to = "Gene", values_to = "Value")
df_long$sample <- factor(df_long$sample, levels = sample_order)
df_long$Gene <- factor(df_long$Gene, levels = gene_order)
# ✅ Load incomplete.csv FIRST
incomplete <- read.csv("incomplete.hiphase.csv", header = TRUE, stringsAsFactors = FALSE)
# Merge and calculate percent covered
df_long <- df_long %>%
left_join(incomplete, by = c("sample", "Gene" = "gene")) %>%
mutate(
largest_haploblock = as.numeric(gsub("%", "", largest_haploblock)),
percent_covered = ifelse(Value == 1, 100, largest_haploblock)
)
# Ensure order is still preserved after join
df_long$sample <- factor(df_long$sample, levels = sample_order)
df_long$Gene <- factor(df_long$Gene, levels = gene_order)
# Final plot — no annotations, just fill
test4 <- ggplot(df_long, aes(x = Gene, y = sample, fill = percent_covered)) +
geom_tile(color = "white") +
#scale_fill_gradient(low = "white", high = "red", na.value = "white",
#name = "Percent Gene\nCovered by\nLargest\nHaploblock")
scale_fill_viridis_c(option = "D", direction = -1, na.value = "white",
name = "Percent Gene\nCovered by\nLargest\nHaploblock")
theme_minimal() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 7),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
) +
labs(
x = "Gene",
y = "Sample"
)
print(test4)
ggsave(filename = "test4.pdf", plot = test4)
print(test1)
print(test2)
print(test3)
print(test4)
ggsave(filename = "test4.pdf", plot = test4)
test4 <- ggplot(df_long, aes(x = Gene, y = sample, fill = percent_covered)) +
geom_tile(color = "white") +
#scale_fill_gradient(low = "white", high = "red", na.value = "white",
#name = "Percent Gene\nCovered by\nLargest\nHaploblock")
scale_fill_viridis_c(option = "D", direction = -1, na.value = "white",
name = "Percent Gene\nCovered by\nLargest\nHaploblock")
theme_minimal() +
theme(
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
) +
labs(
x = "Gene",
y = "Sample"
)
print(test4)
print(test4)
ggsave(filename = "test4.pdf", plot = test4)
test4 <- ggplot(df_long, aes(x = Gene, y = sample, fill = percent_covered)) +
geom_tile(color = "white") +
#scale_fill_gradient(low = "white", high = "red", na.value = "white",
#name = "Percent Gene\nCovered by\nLargest\nHaploblock")
scale_fill_viridis_c(option = "D", direction = -1, na.value = "white",
name = "Percent Gene\nCovered by\nLargest\nHaploblock")
theme_minimal() +
theme(
axis.text.x = element_text(size = 10, angle =45),
axis.text.y = element_text(size = 7),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
) +
labs(
x = "Gene",
y = "Sample"
)
print(test4)
test4 <- ggplot(df_long, aes(x = Gene, y = sample, fill = percent_covered)) +
geom_tile(color = "white") +
#scale_fill_gradient(low = "white", high = "red", na.value = "white",
#name = "Percent Gene\nCovered by\nLargest\nHaploblock")
scale_fill_viridis_c(option = "D", direction = -1, na.value = "white",
name = "Percent Gene\nCovered by\nLargest\nHaploblock")
theme_minimal() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 7),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
) +
labs(
x = "Gene",
y = "Sample"
)
print(test4)
test4
test4
# Final plot — no annotations, just fill
test4 <- ggplot(df_long, aes(x = Gene, y = sample, fill = percent_covered)) +
geom_tile(color = "white") +
#scale_fill_gradient(low = "white", high = "red", na.value = "white",
#name = "Percent Gene\nCovered by\nLargest\nHaploblock")
scale_fill_viridis_c(option = "D", direction = -1, na.value = "white",
name = "Percent Gene\nCovered by\nLargest\nHaploblock") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 7),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
) +
labs(
x = "Gene",
y = "Sample"
)
print(test4)
# Final plot — no annotations, just fill
test4 <- ggplot(df_long, aes(x = Gene, y = sample, fill = percent_covered)) +
geom_tile(color = "white") +
#scale_fill_gradient(low = "white", high = "red", na.value = "white",
#name = "Percent Gene\nCovered by\nLargest\nHaploblock")
scale_fill_viridis_c(option = "D", direction = -1, na.value = "white",
name = "Percent Gene\nCovered by\nLargest\nHaploblock") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 7),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
) +
labs(
x = "Gene",
y = "Sample"
)
print(test4)
print(test4)
ggsave(filename = "test4.pdf", plot = test4)
print(test2)
ggsave(filename = "test2.pdf", plot = test2)
library(ggplot2)
library(viridis)
library(dplyr)
library(patchwork)  # Load patchwork for side-by-side plots
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/downsample/")
# Load the CSV file
#data <- read.csv("MHC_Class_I_downsample_concordance.csv")
#data <- read.csv("MHC_Class_II_downsample_concordance.csv")
data <- read.csv("MHC_Class_III_downsample_concordance.csv")
# Function to create the plot for a given variant type
plot_variant <- function(variant_to_plot, show_legend = TRUE) {
# Filter data for the selected Variant
filtered_data <- subset(data, Variant == variant_to_plot)
# Get unique Proportion-Depth pairs for annotation
depth_labels <- filtered_data %>%
group_by(Proportion) %>%
summarise(Depth = round(unique(Depth)))  # ✅ Round Depth to nearest integer
# Generate the plot
p <- ggplot(filtered_data, aes(x = Proportion, y = Value, color = Metric, shape = Metric, group = Metric)) +
geom_point(size = 3) +
scale_color_viridis_d(option = "viridis") +
scale_x_continuous(
breaks = seq(0.01, 0.1, 0.01),
labels = function(x) paste0(x * 100, "%")
) +
theme_minimal() +
labs(y = "Metric Value", x = "Percent Reads Retained", title = variant_to_plot) +
# ✅ Add Depth annotations below x-axis (rounded)
geom_text(data = depth_labels, aes(x = Proportion, y = min(filtered_data$Value) - 0.05,
label = paste0(Depth, "X")),
color = "black", size = 3, vjust = 0.9, inherit.aes = FALSE) +
theme(
legend.position = ifelse(show_legend, "right", "none"),  # ✅ Hide legend for SNP panel
legend.title = element_blank(),
text = element_text(size = 14),
# Add axis lines
panel.border = element_rect(color = "black", fill = NA, size = 1),
axis.line = element_line(color = "black", size = 0.8)
)
return(p)
}
# Create plots for SNP and INDEL (Hide legend for SNP to avoid redundancy)
plot_snp <- plot_variant("SNP", show_legend = TRUE)
plot_indel <- plot_variant("INDEL", show_legend = TRUE)
# Combine them side by side with patchwork & ADD OVERALL TITLE
final_plot <- (plot_snp / plot_indel) +
plot_annotation(title = "HLA Class III Genotype Concordance")
# Display the final combined plot
print(final_plot)
library(ggplot2)
library(viridis)
library(dplyr)
library(patchwork)  # Load patchwork for side-by-side plots
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/downsample/")
# Load the CSV file
#data <- read.csv("MHC_Class_I_downsample_concordance.csv")
data <- read.csv("MHC_Class_II_downsample_concordance.csv")
#data <- read.csv("MHC_Class_III_downsample_concordance.csv")
# Function to create the plot for a given variant type
plot_variant <- function(variant_to_plot, show_legend = TRUE) {
# Filter data for the selected Variant
filtered_data <- subset(data, Variant == variant_to_plot)
# Get unique Proportion-Depth pairs for annotation
depth_labels <- filtered_data %>%
group_by(Proportion) %>%
summarise(Depth = round(unique(Depth)))  # ✅ Round Depth to nearest integer
# Generate the plot
p <- ggplot(filtered_data, aes(x = Proportion, y = Value, color = Metric, shape = Metric, group = Metric)) +
geom_point(size = 3) +
scale_color_viridis_d(option = "viridis") +
scale_x_continuous(
breaks = seq(0.01, 0.1, 0.01),
labels = function(x) paste0(x * 100, "%")
) +
theme_minimal() +
labs(y = "Metric Value", x = "Percent Reads Retained", title = variant_to_plot) +
# ✅ Add Depth annotations below x-axis (rounded)
geom_text(data = depth_labels, aes(x = Proportion, y = min(filtered_data$Value) - 0.05,
label = paste0(Depth, "X")),
color = "black", size = 3, vjust = 0.9, inherit.aes = FALSE) +
theme(
legend.position = ifelse(show_legend, "right", "none"),  # ✅ Hide legend for SNP panel
legend.title = element_blank(),
text = element_text(size = 14),
# Add axis lines
panel.border = element_rect(color = "black", fill = NA, size = 1),
axis.line = element_line(color = "black", size = 0.8)
)
return(p)
}
# Create plots for SNP and INDEL (Hide legend for SNP to avoid redundancy)
plot_snp <- plot_variant("SNP", show_legend = TRUE)
plot_indel <- plot_variant("INDEL", show_legend = TRUE)
# Combine them side by side with patchwork & ADD OVERALL TITLE
final_plot <- (plot_snp / plot_indel) +
plot_annotation(title = "HLA Class III Genotype Concordance")
# Display the final combined plot
print(final_plot)
library(ggplot2)
library(viridis)
library(dplyr)
library(patchwork)  # Load patchwork for side-by-side plots
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/downsample/")
# Load the CSV file
#data <- read.csv("MHC_Class_I_downsample_concordance.csv")
data <- read.csv("MHC_Class_II_downsample_concordance.csv")
#data <- read.csv("MHC_Class_III_downsample_concordance.csv")
# Function to create the plot for a given variant type
plot_variant <- function(variant_to_plot, show_legend = TRUE) {
# Filter data for the selected Variant
filtered_data <- subset(data, Variant == variant_to_plot)
# Get unique Proportion-Depth pairs for annotation
depth_labels <- filtered_data %>%
group_by(Proportion) %>%
summarise(Depth = round(unique(Depth)))  # ✅ Round Depth to nearest integer
# Generate the plot
p <- ggplot(filtered_data, aes(x = Proportion, y = Value, color = Metric, shape = Metric, group = Metric)) +
geom_point(size = 3) +
scale_color_viridis_d(option = "viridis") +
scale_x_continuous(
breaks = seq(0.01, 0.1, 0.01),
labels = function(x) paste0(x * 100, "%")
) +
theme_minimal() +
labs(y = "Metric Value", x = "Percent Reads Retained", title = variant_to_plot) +
# ✅ Add Depth annotations below x-axis (rounded)
geom_text(data = depth_labels, aes(x = Proportion, y = min(filtered_data$Value) - 0.05,
label = paste0(Depth, "X")),
color = "black", size = 3, vjust = 0.9, inherit.aes = FALSE) +
theme(
legend.position = ifelse(show_legend, "right", "none"),  # ✅ Hide legend for SNP panel
legend.title = element_blank(),
text = element_text(size = 14),
# Add axis lines
panel.border = element_rect(color = "black", fill = NA, size = 1),
axis.line = element_line(color = "black", size = 0.8)
)
return(p)
}
# Create plots for SNP and INDEL (Hide legend for SNP to avoid redundancy)
plot_snp <- plot_variant("SNP", show_legend = TRUE)
plot_indel <- plot_variant("INDEL", show_legend = TRUE)
# Combine them side by side with patchwork & ADD OVERALL TITLE
final_plot <- (plot_snp / plot_indel) +
plot_annotation(title = "HLA Class II Genotype Concordance")
# Display the final combined plot
print(final_plot)
library(ggplot2)
library(viridis)
library(dplyr)
library(patchwork)  # Load patchwork for side-by-side plots
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/downsample/")
# Load the CSV file
data <- read.csv("MHC_Class_I_downsample_concordance.csv")
#data <- read.csv("MHC_Class_II_downsample_concordance.csv")
#data <- read.csv("MHC_Class_III_downsample_concordance.csv")
# Function to create the plot for a given variant type
plot_variant <- function(variant_to_plot, show_legend = TRUE) {
# Filter data for the selected Variant
filtered_data <- subset(data, Variant == variant_to_plot)
# Get unique Proportion-Depth pairs for annotation
depth_labels <- filtered_data %>%
group_by(Proportion) %>%
summarise(Depth = round(unique(Depth)))  # ✅ Round Depth to nearest integer
# Generate the plot
p <- ggplot(filtered_data, aes(x = Proportion, y = Value, color = Metric, shape = Metric, group = Metric)) +
geom_point(size = 3) +
scale_color_viridis_d(option = "viridis") +
scale_x_continuous(
breaks = seq(0.01, 0.1, 0.01),
labels = function(x) paste0(x * 100, "%")
) +
theme_minimal() +
labs(y = "Metric Value", x = "Percent Reads Retained", title = variant_to_plot) +
# ✅ Add Depth annotations below x-axis (rounded)
geom_text(data = depth_labels, aes(x = Proportion, y = min(filtered_data$Value) - 0.05,
label = paste0(Depth, "X")),
color = "black", size = 3, vjust = 0.9, inherit.aes = FALSE) +
theme(
legend.position = ifelse(show_legend, "right", "none"),  # ✅ Hide legend for SNP panel
legend.title = element_blank(),
text = element_text(size = 14),
# Add axis lines
panel.border = element_rect(color = "black", fill = NA, size = 1),
axis.line = element_line(color = "black", size = 0.8)
)
return(p)
}
# Create plots for SNP and INDEL (Hide legend for SNP to avoid redundancy)
plot_snp <- plot_variant("SNP", show_legend = TRUE)
plot_indel <- plot_variant("INDEL", show_legend = TRUE)
# Combine them side by side with patchwork & ADD OVERALL TITLE
final_plot <- (plot_snp / plot_indel) +
plot_annotation(title = "HLA Class II Genotype Concordance")
# Display the final combined plot
print(final_plot)
