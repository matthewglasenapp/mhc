panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.y = element_text(size = 11, color = "black"),  # Increase size and make bold
axis.line = element_line(color = "black", linewidth = 0.5),
legend.position = "bottom",
legend.box = "horizontal",
axis.ticks.y = element_blank(),  # Remove y-axis ticks
legend.title = element_text()
)
ebr1
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
View(df_bindin)
bindin_interface <- read.csv("/Users/matt/Desktop/bindin_interface.csv")
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = df_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
View(bindin_interface)
bindin_interface <- read.csv("/Users/matt/Desktop/bindin_interface.csv")
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = df_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
View(bindin_interface)
View(df_bindin)
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = bindin_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
ebr1
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = bindin_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
# Install and load required packages
library(ggtree)
install.packages("ggtree")
# Install and load required packages
library(ggtree)
install.packages("ggtree")
R
which R
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(jtools)
install.packages("jtools")
library(ggplot2)
library(jtools)
library(sjPlot)
library(sjmisc)
library(knitr)
data = read.csv("d_k2p.csv")
knitr::kable(data, format="markdown")
fig1 <- ggplot(data, aes(x=mean_sco_k2p, y=mean_D)) +
geom_point(size = 3) +
labs(x="Phylogenetic Distance (K2P Means)", y = "Mean Patterson's D Statistic") +
theme_classic() +
theme(axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"), axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))
fig1
ggsave(filename = "/Users/matt/Desktop/d_k2p.svg", plot = fig1)
fig2 <- ggplot(data, aes(x=bindin_K2P, y=mean_D)) +
geom_point(size = 3) +
labs(x="Bindin Distance (K2P)", y = "Mean Patterson's D Statistic") +
theme_classic() +
scale_x_continuous(breaks = c(0.025, 0.050, 0.075)) +
theme(axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"), axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))
ggsave(filename = "/Users/matt/Desktop/d_bnd.svg", plot = fig2)
fig3 <- ggplot(data, aes(x=ebr1_K2P, y=mean_D)) +
geom_point(size = 3) +
labs(x="EBR1 Distance (K2P)", y = "Mean Patterson's D Statistic") +
theme_classic() +
theme(axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"), axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))
ggsave(filename = "/Users/matt/Desktop/d_ebr1.svg", plot = fig3)
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/bindin/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/bindin/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/bindin/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
# Read the file
data <- read.csv("/Users/matt/Documents/GitHub/urchin_grp/hdock/ebr1/overlap_dist.csv", header = FALSE)
# Convert the data to a vector
data_vector <- as.vector(unlist(data))
mean(data_vector)
model1 <- lm(data_vector ~ 1)
confint(model1, level=0.99)
library(rsconnect)
renv::snapshot()
library(rsconnect)
renv::snapshot()
rsconnect::deployApp('/Users/matt/Documents/GitHub/hla_coverage/scripts/shiny_app/', appName = "hla_coverage")
# Load necessary libraries
library(tidyverse)
# File path for the new data
phased_genes_file <- "phased_genes.csv"
# Function to process and clean the new data
process_phased_genes <- function(file_path) {
# Read the data with correct delimiter
data <- read_tsv(file_path, col_names = TRUE) %>%  # Use read_tsv for tab-delimited files
mutate(
platform = case_when(
platform == "Revio" ~ "PacBio",
platform == "PromethION" ~ "ONT",
TRUE ~ platform
),
sample_group = case_when(
sample %in% hprc_samples ~ "HPRC",
sample %in% ihw_samples ~ "IHW",
TRUE ~ "Other"
)
) %>%
filter(sample_group != "Other") %>%  # Keep only HPRC and IHW
drop_na(num_genes)  # Remove rows with NA in num_genes
return(data)
}
# Define sample groups
hprc_samples <- c("HG002", "HG003", "HG004", "HG005", "HG01106", "HG01258",
"HG01928", "HG02055", "HG02630", "HG03492", "HG03579",
"NA19240", "NA20129", "NA21309", "NA24694", "NA24695")
ihw_samples <- c("IHW09021", "IHW09049", "IHW09071", "IHW09117", "IHW09118",
"IHW09122", "IHW09125", "IHW09175", "IHW09198", "IHW09200",
"IHW09224", "IHW09245", "IHW09251", "IHW09359", "IHW09364",
"IHW09409")
# Process the new data
phased_genes_data <- process_phased_genes(phased_genes_file)
# Load necessary libraries
library(tidyverse)
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/phasing/")
# File path for the new data
phased_genes_file <- "phased_genes.csv"
# Function to process and clean the new data
process_phased_genes <- function(file_path) {
# Read the data with correct delimiter
data <- read_tsv(file_path, col_names = TRUE) %>%  # Use read_tsv for tab-delimited files
mutate(
platform = case_when(
platform == "Revio" ~ "PacBio",
platform == "PromethION" ~ "ONT",
TRUE ~ platform
),
sample_group = case_when(
sample %in% hprc_samples ~ "HPRC",
sample %in% ihw_samples ~ "IHW",
TRUE ~ "Other"
)
) %>%
filter(sample_group != "Other") %>%  # Keep only HPRC and IHW
drop_na(num_genes)  # Remove rows with NA in num_genes
return(data)
}
# Define sample groups
hprc_samples <- c("HG002", "HG003", "HG004", "HG005", "HG01106", "HG01258",
"HG01928", "HG02055", "HG02630", "HG03492", "HG03579",
"NA19240", "NA20129", "NA21309", "NA24694", "NA24695")
ihw_samples <- c("IHW09021", "IHW09049", "IHW09071", "IHW09117", "IHW09118",
"IHW09122", "IHW09125", "IHW09175", "IHW09198", "IHW09200",
"IHW09224", "IHW09245", "IHW09251", "IHW09359", "IHW09364",
"IHW09409")
# Process the new data
phased_genes_data <- process_phased_genes(phased_genes_file)
# Check the first few rows of the data
print(head(phased_genes_data))
# Create the box plot using the processed data
# Create the box plot using the processed data
phased_genes_plot <- ggplot(phased_genes_data, aes(x = interaction(platform, sample_group), y = num_genes, fill = interaction(platform, sample_group))) +
geom_boxplot(
alpha = 0.3, width = 0.3, outlier.shape = NA, color = "black"
) +
geom_jitter(
aes(color = interaction(platform, sample_group)),
width = 0.15, height = 0, size = 2, alpha = 0.8  # Adjust jitter width to match box width
) +
scale_y_continuous(labels = scales::label_number()) +  # Adjust y-axis labels to standard numbers
scale_fill_viridis_d(option = "D", begin = 0.1, end = 0.9) +  # Viridis color for fill
scale_color_viridis_d(option = "D", begin = 0.1, end = 0.9) +  # Viridis color for jitter
labs(x = "", y = "Number of Phased\nGenes") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12, face = "bold", color = "black"),
axis.text.y = element_text(size = 8, color = "black"),
axis.title.y = element_text(size = 12, face = "bold", lineheight = 0.8),
axis.line.y = element_line(color = "black"),
axis.line.x = element_line(color = "black"),
panel.grid.major.y = element_line(color = "gray80", size = 0.5),  # Feint grid lines
panel.grid.major.x = element_blank(),  # Remove vertical grid lines
panel.grid.minor = element_blank(),
legend.position = "none"
)
# Display the plot
print(phased_genes_plot)
# Load necessary libraries
library(tidyverse)
# Set working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/phasing/")
# File path for the new data
phased_genes_file <- "phased_genes.csv"
# Function to process and clean the new data
process_phased_genes <- function(file_path) {
# Read the data with correct delimiter
data <- read_tsv(file_path, col_names = TRUE) %>%  # Use read_tsv for tab-delimited files
mutate(
platform = case_when(
platform == "Revio" ~ "PacBio",
platform == "PromethION" ~ "ONT",
TRUE ~ platform
),
sample_group = case_when(
sample %in% hprc_samples ~ "HPRC",
sample %in% ihw_samples ~ "IHW",
TRUE ~ "Other"
)
) %>%
filter(sample_group != "Other") %>%  # Keep only HPRC and IHW
drop_na(num_genes)  # Remove rows with NA in num_genes
return(data)
}
# Define sample groups
hprc_samples <- c("HG002", "HG003", "HG004", "HG005", "HG01106", "HG01258",
"HG01928", "HG02055", "HG02630", "HG03492", "HG03579",
"NA19240", "NA20129", "NA21309", "NA24694", "NA24695")
ihw_samples <- c("IHW09021", "IHW09049", "IHW09071", "IHW09117", "IHW09118",
"IHW09122", "IHW09125", "IHW09175", "IHW09198", "IHW09200",
"IHW09224", "IHW09245", "IHW09251", "IHW09359", "IHW09364",
"IHW09409")
# Process the new data
phased_genes_data <- process_phased_genes(phased_genes_file)
# Manually set the x-axis order and labels
phased_genes_data <- phased_genes_data %>%
mutate(
x_group = factor(
paste(platform, sample_group),
levels = c("PacBio HPRC", "PacBio IHW", "ONT HPRC", "ONT IHW")  # Correct order
)
)
# Create the box plot using the processed data
phased_genes_plot <- ggplot(phased_genes_data, aes(x = x_group, y = num_genes, fill = x_group)) +
geom_boxplot(
alpha = 0.3, width = 0.3, outlier.shape = NA, color = "black"
) +
geom_jitter(
aes(color = x_group),
width = 0.15, height = 0, size = 2, alpha = 0.8  # Adjust jitter width to match box width
) +
scale_y_continuous(labels = scales::label_number()) +  # Adjust y-axis labels to standard numbers
scale_fill_viridis_d(option = "D", begin = 0.1, end = 0.9) +  # Viridis color for fill
scale_color_viridis_d(option = "D", begin = 0.1, end = 0.9) +  # Viridis color for jitter
labs(x = "", y = "Number of Phased\nGenes") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12, face = "bold", color = "black"),
axis.text.y = element_text(size = 8, color = "black"),
axis.title.y = element_text(size = 12, face = "bold", lineheight = 0.8),
axis.line.y = element_line(color = "black"),
axis.line.x = element_line(color = "black"),
panel.grid.major.y = element_line(color = "gray80", size = 0.5),  # Feint grid lines
panel.grid.major.x = element_blank(),  # Remove vertical grid lines
panel.grid.minor = element_blank(),
legend.position = "none"
)
# Display the plot
print(phased_genes_plot)
# Load necessary libraries
library(tidyverse)
# Set working directory
setwd("/Users/matt/Documents/GitHub/mhc/scripts/visualizations/phasing/")
# File path for the new data
phased_genes_file <- "phased_genes.csv"
# Function to process and clean the new data
process_phased_genes <- function(file_path) {
# Read the data with correct delimiter
data <- read_tsv(file_path, col_names = TRUE) %>%  # Use read_tsv for tab-delimited files
mutate(
platform = case_when(
platform == "Revio" ~ "PacBio",
platform == "PromethION" ~ "ONT",
TRUE ~ platform
),
sample_group = case_when(
sample %in% hprc_samples ~ "HPRC",
sample %in% ihw_samples ~ "IHW",
TRUE ~ "Other"
)
) %>%
filter(sample_group != "Other") %>%  # Keep only HPRC and IHW
drop_na(num_genes)  # Remove rows with NA in num_genes
return(data)
}
# Define sample groups
hprc_samples <- c("HG002", "HG003", "HG004", "HG005", "HG01106", "HG01258",
"HG01928", "HG02055", "HG02630", "HG03492", "HG03579",
"NA19240", "NA20129", "NA21309", "NA24694", "NA24695")
ihw_samples <- c("IHW09021", "IHW09049", "IHW09071", "IHW09117", "IHW09118",
"IHW09122", "IHW09125", "IHW09175", "IHW09198", "IHW09200",
"IHW09224", "IHW09245", "IHW09251", "IHW09359", "IHW09364",
"IHW09409")
# Process the new data
phased_genes_data <- process_phased_genes(phased_genes_file)
# Manually set the x-axis order and labels
phased_genes_data <- phased_genes_data %>%
mutate(
x_group = factor(
paste(platform, sample_group),
levels = c("PacBio HPRC", "PacBio IHW", "ONT HPRC", "ONT IHW")  # Correct order
)
)
# Create the box plot using the processed data
phased_genes_plot <- ggplot(phased_genes_data, aes(x = x_group, y = num_genes, fill = x_group)) +
geom_boxplot(
alpha = 0.3, width = 0.3, outlier.shape = NA, color = "black"
) +
geom_jitter(
aes(color = x_group),
width = 0.15, height = 0, size = 2, alpha = 0.8  # Adjust jitter width to match box width
) +
scale_y_continuous(labels = scales::label_number()) +  # Adjust y-axis labels to standard numbers
scale_fill_viridis_d(option = "D", begin = 0.1, end = 0.9) +  # Viridis color for fill
scale_color_viridis_d(option = "D", begin = 0.1, end = 0.9) +  # Viridis color for jitter
labs(x = "", y = "Number of Phased\nGenes") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12, face = "bold", color = "black"),
axis.text.y = element_text(size = 8, color = "black"),
axis.title.y = element_text(size = 12, face = "bold", lineheight = 0.8),
axis.line.y = element_line(color = "black"),
axis.line.x = element_line(color = "black"),
panel.grid.major.y = element_line(color = "gray80", size = 0.5),  # Feint grid lines
panel.grid.major.x = element_blank(),  # Remove vertical grid lines
panel.grid.minor = element_blank(),
legend.position = "none"
)
# Display the plot
print(phased_genes_plot)
ggsave(filename = "phased_genes.pdf", plot = phased_genes_plot)
ggsave(filename = "phased_genes.png", plot = phased_genes_plot)
